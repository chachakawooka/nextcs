//
// Autogenerated by Thrift Compiler (0.15.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import general_ttypes = require('./general_types');


import ttypes = require('./api_types');
import TransactionType = ttypes.TransactionType
import SmartOperationState = ttypes.SmartOperationState
import TransactionState = ttypes.TransactionState
import TokensListSortField = ttypes.TokensListSortField
import TokenHoldersSortField = ttypes.TokenHoldersSortField
import WalletsListSort = ttypes.WalletsListSort
import AmountCommission = ttypes.AmountCommission
import CumulativeAmount = ttypes.CumulativeAmount
import SmartContractDeploy = ttypes.SmartContractDeploy
import SmartContract = ttypes.SmartContract
import SmartContractInvocation = ttypes.SmartContractInvocation
import TransactionId = ttypes.TransactionId
import TokenDeployTransInfo = ttypes.TokenDeployTransInfo
import TokenTransferTransInfo = ttypes.TokenTransferTransInfo
import SmartDeployTransInfo = ttypes.SmartDeployTransInfo
import SmartExecutionTransInfo = ttypes.SmartExecutionTransInfo
import ExtraFee = ttypes.ExtraFee
import SmartStateTransInfo = ttypes.SmartStateTransInfo
import SmartTransInfo = ttypes.SmartTransInfo
import Transaction = ttypes.Transaction
import SealedTransaction = ttypes.SealedTransaction
import ShortTransaction = ttypes.ShortTransaction
import Pool = ttypes.Pool
import DelegatedItem = ttypes.DelegatedItem
import Delegated = ttypes.Delegated
import WalletData = ttypes.WalletData
import PeriodStats = ttypes.PeriodStats
import WalletDataGetResult = ttypes.WalletDataGetResult
import WalletIdGetResult = ttypes.WalletIdGetResult
import WalletTransactionsCountGetResult = ttypes.WalletTransactionsCountGetResult
import WalletBalanceGetResult = ttypes.WalletBalanceGetResult
import TransactionGetResult = ttypes.TransactionGetResult
import TransactionsGetResult = ttypes.TransactionsGetResult
import TransactionFlowResult = ttypes.TransactionFlowResult
import SingleTokenQuery = ttypes.SingleTokenQuery
import SingleQuery = ttypes.SingleQuery
import TransactionsQuery = ttypes.TransactionsQuery
import SelectedTokenTransfers = ttypes.SelectedTokenTransfers
import PublicKeyTransactions = ttypes.PublicKeyTransactions
import FilteredTransactionsListResult = ttypes.FilteredTransactionsListResult
import PoolListGetResult = ttypes.PoolListGetResult
import PoolInfoGetResult = ttypes.PoolInfoGetResult
import PoolTransactionsGetResult = ttypes.PoolTransactionsGetResult
import StatsGetResult = ttypes.StatsGetResult
import SmartContractGetResult = ttypes.SmartContractGetResult
import SmartContractAddressesListGetResult = ttypes.SmartContractAddressesListGetResult
import SmartContractsListGetResult = ttypes.SmartContractsListGetResult
import TransactionsStateGetResult = ttypes.TransactionsStateGetResult
import SmartMethodParamsGetResult = ttypes.SmartMethodParamsGetResult
import ContractAllMethodsGetResult = ttypes.ContractAllMethodsGetResult
import SmartContractMethodArgument = ttypes.SmartContractMethodArgument
import SmartContractMethod = ttypes.SmartContractMethod
import SmartContractDataResult = ttypes.SmartContractDataResult
import SmartContractCompileResult = ttypes.SmartContractCompileResult
import TokenInfo = ttypes.TokenInfo
import TokenTransaction = ttypes.TokenTransaction
import TokenHolder = ttypes.TokenHolder
import TokenBalance = ttypes.TokenBalance
import TokenBalancesResult = ttypes.TokenBalancesResult
import TokenTransfer = ttypes.TokenTransfer
import TokenTransfersResult = ttypes.TokenTransfersResult
import TokenTransactionsResult = ttypes.TokenTransactionsResult
import TokenInfoResult = ttypes.TokenInfoResult
import TokenHoldersResult = ttypes.TokenHoldersResult
import TokensListResult = ttypes.TokensListResult
import WalletInfo = ttypes.WalletInfo
import ActualFeeGetResult = ttypes.ActualFeeGetResult
import WalletsGetResult = ttypes.WalletsGetResult
import TrustedInfo = ttypes.TrustedInfo
import TrustedGetResult = ttypes.TrustedGetResult
import SyncStateResult = ttypes.SyncStateResult
import ExecuteCountGetResult = ttypes.ExecuteCountGetResult
import TokenFilters = ttypes.TokenFilters

declare class Client {
    private output: thrift.TTransport;
    private pClass: thrift.TProtocol;
    private _seqid: number;

    constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

    ActualFeeGet(transactionSize: number): Promise<ActualFeeGetResult>;

    ActualFeeGet(transactionSize: number, callback?: (error: void, response: ActualFeeGetResult)=>void): void;

    WalletDataGet(address: string): Promise<WalletDataGetResult>;

    WalletDataGet(address: string, callback?: (error: void, response: WalletDataGetResult)=>void): void;

    WalletIdGet(address: string): Promise<WalletIdGetResult>;

    WalletIdGet(address: string, callback?: (error: void, response: WalletIdGetResult)=>void): void;

    WalletTransactionsCountGet(address: string): Promise<WalletTransactionsCountGetResult>;

    WalletTransactionsCountGet(address: string, callback?: (error: void, response: WalletTransactionsCountGetResult)=>void): void;

    WalletBalanceGet(address: string): Promise<WalletBalanceGetResult>;

    WalletBalanceGet(address: string, callback?: (error: void, response: WalletBalanceGetResult)=>void): void;

    TransactionGet(transactionId: TransactionId): Promise<TransactionGetResult>;

    TransactionGet(transactionId: TransactionId, callback?: (error: void, response: TransactionGetResult)=>void): void;

    TransactionsGet(address: string, offset: Int64, limit: Int64): Promise<TransactionsGetResult>;

    TransactionsGet(address: string, offset: Int64, limit: Int64, callback?: (error: void, response: TransactionsGetResult)=>void): void;

    TransactionFlow(transaction: Transaction): Promise<TransactionFlowResult>;

    TransactionFlow(transaction: Transaction, callback?: (error: void, response: TransactionFlowResult)=>void): void;

    TransactionsListGet(offset: Int64, limit: Int64): Promise<TransactionsGetResult>;

    TransactionsListGet(offset: Int64, limit: Int64, callback?: (error: void, response: TransactionsGetResult)=>void): void;

    FilteredTransactionsListGet(generalQuery: TransactionsQuery): Promise<FilteredTransactionsListResult>;

    FilteredTransactionsListGet(generalQuery: TransactionsQuery, callback?: (error: void, response: FilteredTransactionsListResult)=>void): void;

    GetLastHash(): Promise<string>;

    GetLastHash(callback?: (error: void, response: string)=>void): void;

    PoolListGetStable(sequence: Int64, limit: Int64): Promise<PoolListGetResult>;

    PoolListGetStable(sequence: Int64, limit: Int64, callback?: (error: void, response: PoolListGetResult)=>void): void;

    PoolListGet(offset: Int64, limit: Int64): Promise<PoolListGetResult>;

    PoolListGet(offset: Int64, limit: Int64, callback?: (error: void, response: PoolListGetResult)=>void): void;

    PoolInfoGet(sequence: Int64, index: Int64): Promise<PoolInfoGetResult>;

    PoolInfoGet(sequence: Int64, index: Int64, callback?: (error: void, response: PoolInfoGetResult)=>void): void;

    PoolTransactionsGet(sequence: Int64, offset: Int64, limit: Int64): Promise<PoolTransactionsGetResult>;

    PoolTransactionsGet(sequence: Int64, offset: Int64, limit: Int64, callback?: (error: void, response: PoolTransactionsGetResult)=>void): void;

    StatsGet(): Promise<StatsGetResult>;

    StatsGet(callback?: (error: void, response: StatsGetResult)=>void): void;

    SmartContractGet(address: string): Promise<SmartContractGetResult>;

    SmartContractGet(address: string, callback?: (error: void, response: SmartContractGetResult)=>void): void;

    SmartContractsListGet(deployer: string, offset: Int64, limit: Int64): Promise<SmartContractsListGetResult>;

    SmartContractsListGet(deployer: string, offset: Int64, limit: Int64, callback?: (error: void, response: SmartContractsListGetResult)=>void): void;

    SmartContractAddressesListGet(deployer: string): Promise<SmartContractAddressesListGetResult>;

    SmartContractAddressesListGet(deployer: string, callback?: (error: void, response: SmartContractAddressesListGetResult)=>void): void;

    WaitForBlock(obsolete: string): Promise<string>;

    WaitForBlock(obsolete: string, callback?: (error: void, response: string)=>void): void;

    WaitForSmartTransaction(smart_public: string): Promise<TransactionId>;

    WaitForSmartTransaction(smart_public: string, callback?: (error: void, response: TransactionId)=>void): void;

    SmartContractsAllListGet(offset: Int64, limit: Int64): Promise<SmartContractsListGetResult>;

    SmartContractsAllListGet(offset: Int64, limit: Int64, callback?: (error: void, response: SmartContractsListGetResult)=>void): void;

    TransactionsStateGet(address: string, id: Int64[]): Promise<TransactionsStateGetResult>;

    TransactionsStateGet(address: string, id: Int64[], callback?: (error: void, response: TransactionsStateGetResult)=>void): void;

    ContractAllMethodsGet(byteCodeObjects: general_ttypes.ByteCodeObject[]): Promise<ContractAllMethodsGetResult>;

    ContractAllMethodsGet(byteCodeObjects: general_ttypes.ByteCodeObject[], callback?: (error: void, response: ContractAllMethodsGetResult)=>void): void;

    SmartMethodParamsGet(address: string, id: Int64): Promise<SmartMethodParamsGetResult>;

    SmartMethodParamsGet(address: string, id: Int64, callback?: (error: void, response: SmartMethodParamsGetResult)=>void): void;

    SmartContractDataGet(address: string): Promise<SmartContractDataResult>;

    SmartContractDataGet(address: string, callback?: (error: void, response: SmartContractDataResult)=>void): void;

    SmartContractCompile(sourceCode: string): Promise<SmartContractCompileResult>;

    SmartContractCompile(sourceCode: string, callback?: (error: void, response: SmartContractCompileResult)=>void): void;

    TokenBalancesGet(address: string): Promise<TokenBalancesResult>;

    TokenBalancesGet(address: string, callback?: (error: void, response: TokenBalancesResult)=>void): void;

    TokenTransfersGet(token: string, offset: Int64, limit: Int64): Promise<TokenTransfersResult>;

    TokenTransfersGet(token: string, offset: Int64, limit: Int64, callback?: (error: void, response: TokenTransfersResult)=>void): void;

    TokenTransferGet(token: string, id: TransactionId): Promise<TokenTransfersResult>;

    TokenTransferGet(token: string, id: TransactionId, callback?: (error: void, response: TokenTransfersResult)=>void): void;

    TokenTransfersListGet(offset: Int64, limit: Int64): Promise<TokenTransfersResult>;

    TokenTransfersListGet(offset: Int64, limit: Int64, callback?: (error: void, response: TokenTransfersResult)=>void): void;

    TokenWalletTransfersGet(token: string, address: string, offset: Int64, limit: Int64): Promise<TokenTransfersResult>;

    TokenWalletTransfersGet(token: string, address: string, offset: Int64, limit: Int64, callback?: (error: void, response: TokenTransfersResult)=>void): void;

    TokenTransactionsGet(token: string, offset: Int64, limit: Int64): Promise<TokenTransactionsResult>;

    TokenTransactionsGet(token: string, offset: Int64, limit: Int64, callback?: (error: void, response: TokenTransactionsResult)=>void): void;

    TokenInfoGet(token: string): Promise<TokenInfoResult>;

    TokenInfoGet(token: string, callback?: (error: void, response: TokenInfoResult)=>void): void;

    TokenHoldersGet(token: string, offset: Int64, limit: Int64, order: TokenHoldersSortField, desc: boolean): Promise<TokenHoldersResult>;

    TokenHoldersGet(token: string, offset: Int64, limit: Int64, order: TokenHoldersSortField, desc: boolean, callback?: (error: void, response: TokenHoldersResult)=>void): void;

    TokensListGet(offset: Int64, limit: Int64, order: TokensListSortField, desc: boolean, filters: TokenFilters): Promise<TokensListResult>;

    TokensListGet(offset: Int64, limit: Int64, order: TokensListSortField, desc: boolean, filters: TokenFilters, callback?: (error: void, response: TokensListResult)=>void): void;

    WalletsGet(offset: Int64, limit: Int64, ordCol: any, desc: boolean): Promise<WalletsGetResult>;

    WalletsGet(offset: Int64, limit: Int64, ordCol: any, desc: boolean, callback?: (error: void, response: WalletsGetResult)=>void): void;

    TrustedGet(page: number): Promise<TrustedGetResult>;

    TrustedGet(page: number, callback?: (error: void, response: TrustedGetResult)=>void): void;

    SyncStateGet(): Promise<SyncStateResult>;

    SyncStateGet(callback?: (error: void, response: SyncStateResult)=>void): void;

    ExecuteCountGet(executeMethod: string): Promise<ExecuteCountGetResult>;

    ExecuteCountGet(executeMethod: string, callback?: (error: void, response: ExecuteCountGetResult)=>void): void;
  }

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_ActualFeeGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_WalletDataGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_WalletIdGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_WalletTransactionsCountGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_WalletBalanceGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TransactionGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TransactionsGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TransactionFlow(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TransactionsListGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_FilteredTransactionsListGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_GetLastHash(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_PoolListGetStable(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_PoolListGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_PoolInfoGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_PoolTransactionsGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_StatsGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_SmartContractGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_SmartContractsListGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_SmartContractAddressesListGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_WaitForBlock(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_WaitForSmartTransaction(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_SmartContractsAllListGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TransactionsStateGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_ContractAllMethodsGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_SmartMethodParamsGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_SmartContractDataGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_SmartContractCompile(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TokenBalancesGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TokenTransfersGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TokenTransferGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TokenTransfersListGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TokenWalletTransfersGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TokenTransactionsGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TokenInfoGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TokenHoldersGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TokensListGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_WalletsGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_TrustedGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_SyncStateGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
    process_ExecuteCountGet(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
