//
// Autogenerated by Thrift Compiler (0.15.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import general_ttypes = require('./general_types');



declare enum TransactionType {
  TT_Transfer = 0,
  TT_ContractDeploy = 1,
  TT_ContractCall = 2,
  TT_ContractState = 3,
  TT_ContractReplenish = 4,
  TT_TokenDeploy = 5,
  TT_TokenTransfer = 6,
  TT_Delegation = 7,
  TT_RevokeDelegation = 8,
  TT_Hold = 9,
  TT_Release = 10,
  TT_CancelHold = 11,
  TT_DelayedTransfer = 12,
  TT_UpdateBootstrapList = 13,
  TT_UpdateSettings = 14,
  TT_Malformed = 15,
  TT_ContractEmitted = 16,
  TT_Utility = 17,
  TT_Other = 18,
}

declare enum SmartOperationState {
  SOS_Pending = 0,
  SOS_Success = 1,
  SOS_Failed = 2,
}

declare enum TransactionState {
  INVALID = 0,
  VALID = 1,
  INPROGRESS = 2,
}

declare enum TokensListSortField {
  TL_Code = 0,
  TL_Name = 1,
  TL_Address = 2,
  TL_TotalSupply = 3,
  TL_HoldersCount = 4,
  TL_TransfersCount = 5,
  TL_TransactionsCount = 6,
}

declare enum TokenHoldersSortField {
  TH_Balance = 0,
  TH_TransfersCount = 1,
}

declare enum WalletsListSort {
  WL_CurrentSum = 0,
  WL_CreationTime = 1,
  WL_TransactionsCount = 2,
}

declare class AmountCommission {
    public commission?: number;

      constructor(args?: { commission?: number; });
  }

declare class CumulativeAmount {
    public integral?: Int64;
    public fraction?: Int64;

      constructor(args?: { integral?: Int64; fraction?: Int64; });
  }

declare class SmartContractDeploy {
    public sourceCode: string;
    public byteCodeObjects: general_ttypes.ByteCodeObject[];
    public hashState: string;
    public tokenStandard: number;

      constructor(args?: { sourceCode: string; byteCodeObjects: general_ttypes.ByteCodeObject[]; hashState: string; tokenStandard: number; });
  }

declare class SmartContract {
    public address: string;
    public deployer: string;
    public smartContractDeploy: SmartContractDeploy;
    public objectState: string;
    public createTime: Int64;
    public transactionsCount: number;

      constructor(args?: { address: string; deployer: string; smartContractDeploy: SmartContractDeploy; objectState: string; createTime: Int64; transactionsCount: number; });
  }

declare class SmartContractInvocation {
    public method: string;
    public params: general_ttypes.Variant[];
    public usedContracts: string[];
    public forgetNewState: boolean;
    public smartContractDeploy?: SmartContractDeploy;
    public version?: number;

      constructor(args?: { method: string; params: general_ttypes.Variant[]; usedContracts: string[]; forgetNewState: boolean; smartContractDeploy?: SmartContractDeploy; version?: number; });
  }

declare class TransactionId {
    public poolSeq: Int64;
    public index: number;

      constructor(args?: { poolSeq: Int64; index: number; });
  }

declare class TokenDeployTransInfo {
    public name: string;
    public code: string;
    public tokenStandard: number;
    public state: SmartOperationState;
    public stateTransaction?: TransactionId;

      constructor(args?: { name: string; code: string; tokenStandard: number; state: SmartOperationState; stateTransaction?: TransactionId; });
  }

declare class TokenTransferTransInfo {
    public code: string;
    public sender: string;
    public receiver: string;
    public amount: string;
    public state: SmartOperationState;
    public stateTransaction?: TransactionId;
    public transferSuccess?: boolean;

      constructor(args?: { code: string; sender: string; receiver: string; amount: string; state: SmartOperationState; stateTransaction?: TransactionId; transferSuccess?: boolean; });
  }

declare class SmartDeployTransInfo {
    public state: SmartOperationState;
    public stateTransaction?: TransactionId;

      constructor(args?: { state: SmartOperationState; stateTransaction?: TransactionId; });
  }

declare class SmartExecutionTransInfo {
    public method: string;
    public params: general_ttypes.Variant[];
    public state: SmartOperationState;
    public stateTransaction?: TransactionId;

      constructor(args?: { method: string; params: general_ttypes.Variant[]; state: SmartOperationState; stateTransaction?: TransactionId; });
  }

declare class ExtraFee {
    public sum: general_ttypes.Amount;
    public comment: string;
    public transactionId: TransactionId;

      constructor(args?: { sum: general_ttypes.Amount; comment: string; transactionId: TransactionId; });
  }

declare class SmartStateTransInfo {
    public success: boolean;
    public executionFee: general_ttypes.Amount;
    public returnValue?: general_ttypes.Variant;
    public startTransaction: TransactionId;

      constructor(args?: { success: boolean; executionFee: general_ttypes.Amount; returnValue?: general_ttypes.Variant; startTransaction: TransactionId; });
  }

declare class SmartTransInfo {
    public v_tokenDeploy?: TokenDeployTransInfo;
    public v_tokenTransfer?: TokenTransferTransInfo;
    public v_smartDeploy?: SmartDeployTransInfo;
    public v_smartExecution?: SmartExecutionTransInfo;
    public v_smartState?: SmartStateTransInfo;

      constructor(args?: { v_tokenDeploy?: TokenDeployTransInfo; v_tokenTransfer?: TokenTransferTransInfo; v_smartDeploy?: SmartDeployTransInfo; v_smartExecution?: SmartExecutionTransInfo; v_smartState?: SmartStateTransInfo; });
  }

declare class Transaction {
    public id: Int64;
    public source: string;
    public target: string;
    public amount: general_ttypes.Amount;
    public balance: general_ttypes.Amount;
    public currency: any;
    public signature: string;
    public smartContract?: SmartContractInvocation;
    public fee: AmountCommission;
    public timeCreation: Int64;
    public userFields?: string;
    public type: TransactionType;
    public smartInfo?: SmartTransInfo;
    public extraFee?: ExtraFee[];
    public poolNumber: Int64;
    public usedContracts?: string[];

      constructor(args?: { id: Int64; source: string; target: string; amount: general_ttypes.Amount; balance: general_ttypes.Amount; currency: any; signature: string; smartContract?: SmartContractInvocation; fee: AmountCommission; timeCreation: Int64; userFields?: string; type: TransactionType; smartInfo?: SmartTransInfo; extraFee?: ExtraFee[]; poolNumber: Int64; usedContracts?: string[]; });
  }

declare class SealedTransaction {
    public id: TransactionId;
    public trxn: Transaction;

      constructor(args?: { id: TransactionId; trxn: Transaction; });
  }

declare class ShortTransaction {
    public id: TransactionId;
    public source: string;
    public target: string;
    public amount: general_ttypes.Amount;
    public fee: AmountCommission;
    public timeCreation: Int64;
    public currency: any;
    public type: TransactionType;
    public userFields?: string;

      constructor(args?: { id: TransactionId; source: string; target: string; amount: general_ttypes.Amount; fee: AmountCommission; timeCreation: Int64; currency: any; type: TransactionType; userFields?: string; });
  }

declare class Pool {
    public hash: string;
    public prevHash: string;
    public time: Int64;
    public transactionsCount: number;
    public poolNumber: Int64;
    public writer: string;
    public totalFee: general_ttypes.Amount;
    public confidants: string[];
    public realTrusted: Int64;
    public numberTrusted: any;

      constructor(args?: { hash: string; prevHash: string; time: Int64; transactionsCount: number; poolNumber: Int64; writer: string; totalFee: general_ttypes.Amount; confidants: string[]; realTrusted: Int64; numberTrusted: any; });
  }

declare class DelegatedItem {
    public wallet: string;
    public sum: general_ttypes.Amount;
    public validUntil?: Int64;

      constructor(args?: { wallet: string; sum: general_ttypes.Amount; validUntil?: Int64; });
  }

declare class Delegated {
    public incoming: general_ttypes.Amount;
    public outgoing: general_ttypes.Amount;
    public donors?: DelegatedItem[];
    public recipients?: DelegatedItem[];

      constructor(args?: { incoming: general_ttypes.Amount; outgoing: general_ttypes.Amount; donors?: DelegatedItem[]; recipients?: DelegatedItem[]; });
  }

declare class WalletData {
    public walletId: number;
    public balance: general_ttypes.Amount;
    public lastTransactionId: Int64;
    public delegated?: Delegated;

      constructor(args?: { walletId: number; balance: general_ttypes.Amount; lastTransactionId: Int64; delegated?: Delegated; });
  }

declare class PeriodStats {
    public periodDuration: Int64;
    public poolsCount: number;
    public transactionsCount: number;
    public balancePerCurrency: any;
    public smartContractsCount: number;
    public transactionsSmartCount: number;

      constructor(args?: { periodDuration: Int64; poolsCount: number; transactionsCount: number; balancePerCurrency: any; smartContractsCount: number; transactionsSmartCount: number; });
  }

declare class WalletDataGetResult {
    public status: general_ttypes.APIResponse;
    public walletData: WalletData;

      constructor(args?: { status: general_ttypes.APIResponse; walletData: WalletData; });
  }

declare class WalletIdGetResult {
    public status: general_ttypes.APIResponse;
    public walletId: number;

      constructor(args?: { status: general_ttypes.APIResponse; walletId: number; });
  }

declare class WalletTransactionsCountGetResult {
    public status: general_ttypes.APIResponse;
    public lastTransactionInnerId: Int64;

      constructor(args?: { status: general_ttypes.APIResponse; lastTransactionInnerId: Int64; });
  }

declare class WalletBalanceGetResult {
    public status: general_ttypes.APIResponse;
    public balance: general_ttypes.Amount;
    public delegated?: Delegated;

      constructor(args?: { status: general_ttypes.APIResponse; balance: general_ttypes.Amount; delegated?: Delegated; });
  }

declare class TransactionGetResult {
    public status: general_ttypes.APIResponse;
    public found: boolean;
    public state: TransactionState;
    public roundNum: number;
    public transaction: SealedTransaction;

      constructor(args?: { status: general_ttypes.APIResponse; found: boolean; state: TransactionState; roundNum: number; transaction: SealedTransaction; });
  }

declare class TransactionsGetResult {
    public status: general_ttypes.APIResponse;
    public result: boolean;
    public total_trxns_count: number;
    public transactions: SealedTransaction[];

      constructor(args?: { status: general_ttypes.APIResponse; result: boolean; total_trxns_count: number; transactions: SealedTransaction[]; });
  }

declare class TransactionFlowResult {
    public status: general_ttypes.APIResponse;
    public smart_contract_result?: general_ttypes.Variant;
    public roundNum: number;
    public id: TransactionId;
    public fee: general_ttypes.Amount;
    public extraFee?: ExtraFee[];

      constructor(args?: { status: general_ttypes.APIResponse; smart_contract_result?: general_ttypes.Variant; roundNum: number; id: TransactionId; fee: general_ttypes.Amount; extraFee?: ExtraFee[]; });
  }

declare class SingleTokenQuery {
    public tokenAddress: string;
    public fromId: TransactionId;

      constructor(args?: { tokenAddress: string; fromId: TransactionId; });
  }

declare class SingleQuery {
    public requestedAddress: string;
    public fromId: TransactionId;
    public tokensList?: SingleTokenQuery[];

      constructor(args?: { requestedAddress: string; fromId: TransactionId; tokensList?: SingleTokenQuery[]; });
  }

declare class TransactionsQuery {
    public flag: number;
    public queries: SingleQuery[];

      constructor(args?: { flag: number; queries: SingleQuery[]; });
  }

declare class SelectedTokenTransfers {
    public tokenAddress: string;
    public tokenName: string;
    public tokenTiker: string;
    public transfers: TokenTransfer[];

      constructor(args?: { tokenAddress: string; tokenName: string; tokenTiker: string; transfers: TokenTransfer[]; });
  }

declare class PublicKeyTransactions {
    public requestedAddress: string;
    public transactions: ShortTransaction[];
    public transfersList?: SelectedTokenTransfers[];

      constructor(args?: { requestedAddress: string; transactions: ShortTransaction[]; transfersList?: SelectedTokenTransfers[]; });
  }

declare class FilteredTransactionsListResult {
    public status: general_ttypes.APIResponse;
    public queryResponse: PublicKeyTransactions[];

      constructor(args?: { status: general_ttypes.APIResponse; queryResponse: PublicKeyTransactions[]; });
  }

declare class PoolListGetResult {
    public status: general_ttypes.APIResponse;
    public result: boolean;
    public count: number;
    public pools: Pool[];

      constructor(args?: { status: general_ttypes.APIResponse; result: boolean; count: number; pools: Pool[]; });
  }

declare class PoolInfoGetResult {
    public status: general_ttypes.APIResponse;
    public isFound: boolean;
    public pool: Pool;

      constructor(args?: { status: general_ttypes.APIResponse; isFound: boolean; pool: Pool; });
  }

declare class PoolTransactionsGetResult {
    public status: general_ttypes.APIResponse;
    public transactions: SealedTransaction[];

      constructor(args?: { status: general_ttypes.APIResponse; transactions: SealedTransaction[]; });
  }

declare class StatsGetResult {
    public status: general_ttypes.APIResponse;
    public stats: PeriodStats[];

      constructor(args?: { status: general_ttypes.APIResponse; stats: PeriodStats[]; });
  }

declare class SmartContractGetResult {
    public status: general_ttypes.APIResponse;
    public smartContract: SmartContract;

      constructor(args?: { status: general_ttypes.APIResponse; smartContract: SmartContract; });
  }

declare class SmartContractAddressesListGetResult {
    public status: general_ttypes.APIResponse;
    public addressesList: string[];

      constructor(args?: { status: general_ttypes.APIResponse; addressesList: string[]; });
  }

declare class SmartContractsListGetResult {
    public status: general_ttypes.APIResponse;
    public count: number;
    public smartContractsList: SmartContract[];

      constructor(args?: { status: general_ttypes.APIResponse; count: number; smartContractsList: SmartContract[]; });
  }

declare class TransactionsStateGetResult {
    public status: general_ttypes.APIResponse;
    public states: any;
    public roundNum: number;

      constructor(args?: { status: general_ttypes.APIResponse; states: any; roundNum: number; });
  }

declare class SmartMethodParamsGetResult {
    public status: general_ttypes.APIResponse;
    public method: string;
    public params: general_ttypes.Variant[];

      constructor(args?: { status: general_ttypes.APIResponse; method: string; params: general_ttypes.Variant[]; });
  }

declare class ContractAllMethodsGetResult {
    public code: any;
    public message: string;
    public methods: general_ttypes.MethodDescription[];

      constructor(args?: { code: any; message: string; methods: general_ttypes.MethodDescription[]; });
  }

declare class SmartContractMethodArgument {
    public type: string;
    public name: string;

      constructor(args?: { type: string; name: string; });
  }

declare class SmartContractMethod {
    public returnType: string;
    public name: string;
    public arguments: SmartContractMethodArgument[];

      constructor(args?: { returnType: string; name: string; arguments: SmartContractMethodArgument[]; });
  }

declare class SmartContractDataResult {
    public status: general_ttypes.APIResponse;
    public methods: SmartContractMethod[];
    public variables: { [k: string]: general_ttypes.Variant; };

      constructor(args?: { status: general_ttypes.APIResponse; methods: SmartContractMethod[]; variables: { [k: string]: general_ttypes.Variant; }; });
  }

declare class SmartContractCompileResult {
    public status: general_ttypes.APIResponse;
    public byteCodeObjects: general_ttypes.ByteCodeObject[];
    public tokenStandard: number;

      constructor(args?: { status: general_ttypes.APIResponse; byteCodeObjects: general_ttypes.ByteCodeObject[]; tokenStandard: number; });
  }

declare class TokenInfo {
    public address: string;
    public code: string;
    public name: string;
    public totalSupply: string;
    public owner: string;
    public transfersCount: number;
    public transactionsCount: number;
    public holdersCount: number;
    public tokenStandard: number;

      constructor(args?: { address: string; code: string; name: string; totalSupply: string; owner: string; transfersCount: number; transactionsCount: number; holdersCount: number; tokenStandard: number; });
  }

declare class TokenTransaction {
    public token: string;
    public transaction: TransactionId;
    public time: Int64;
    public initiator: string;
    public method: string;
    public params: general_ttypes.Variant[];
    public state: SmartOperationState;

      constructor(args?: { token: string; transaction: TransactionId; time: Int64; initiator: string; method: string; params: general_ttypes.Variant[]; state: SmartOperationState; });
  }

declare class TokenHolder {
    public holder: string;
    public token: string;
    public balance: string;
    public transfersCount: number;

      constructor(args?: { holder: string; token: string; balance: string; transfersCount: number; });
  }

declare class TokenBalance {
    public token: string;
    public code: string;
    public name: string;
    public balance: string;

      constructor(args?: { token: string; code: string; name: string; balance: string; });
  }

declare class TokenBalancesResult {
    public status: general_ttypes.APIResponse;
    public balances: TokenBalance[];

      constructor(args?: { status: general_ttypes.APIResponse; balances: TokenBalance[]; });
  }

declare class TokenTransfer {
    public token: string;
    public code: string;
    public sender: string;
    public receiver: string;
    public amount: string;
    public initiator: string;
    public transaction: TransactionId;
    public time: Int64;
    public state: SmartOperationState;
    public userFields?: string;
    public fee: AmountCommission;
    public extraFee: ExtraFee[];

      constructor(args?: { token: string; code: string; sender: string; receiver: string; amount: string; initiator: string; transaction: TransactionId; time: Int64; state: SmartOperationState; userFields?: string; fee: AmountCommission; extraFee: ExtraFee[]; });
  }

declare class TokenTransfersResult {
    public status: general_ttypes.APIResponse;
    public count: number;
    public transfers: TokenTransfer[];

      constructor(args?: { status: general_ttypes.APIResponse; count: number; transfers: TokenTransfer[]; });
  }

declare class TokenTransactionsResult {
    public status: general_ttypes.APIResponse;
    public count: number;
    public transactions: TokenTransaction[];

      constructor(args?: { status: general_ttypes.APIResponse; count: number; transactions: TokenTransaction[]; });
  }

declare class TokenInfoResult {
    public status: general_ttypes.APIResponse;
    public token: TokenInfo;

      constructor(args?: { status: general_ttypes.APIResponse; token: TokenInfo; });
  }

declare class TokenHoldersResult {
    public status: general_ttypes.APIResponse;
    public count: number;
    public holders: TokenHolder[];

      constructor(args?: { status: general_ttypes.APIResponse; count: number; holders: TokenHolder[]; });
  }

declare class TokensListResult {
    public status: general_ttypes.APIResponse;
    public count: number;
    public tokens: TokenInfo[];

      constructor(args?: { status: general_ttypes.APIResponse; count: number; tokens: TokenInfo[]; });
  }

declare class WalletInfo {
    public address: string;
    public balance: general_ttypes.Amount;
    public transactionsNumber: Int64;
    public firstTransactionTime: Int64;
    public delegated?: Delegated;

      constructor(args?: { address: string; balance: general_ttypes.Amount; transactionsNumber: Int64; firstTransactionTime: Int64; delegated?: Delegated; });
  }

declare class ActualFeeGetResult {
    public fee: AmountCommission;

      constructor(args?: { fee: AmountCommission; });
  }

declare class WalletsGetResult {
    public status: general_ttypes.APIResponse;
    public count: number;
    public wallets: WalletInfo[];

      constructor(args?: { status: general_ttypes.APIResponse; count: number; wallets: WalletInfo[]; });
  }

declare class TrustedInfo {
    public address: string;
    public timesWriter: number;
    public timesTrusted: number;
    public feeCollected: general_ttypes.Amount;

      constructor(args?: { address: string; timesWriter: number; timesTrusted: number; feeCollected: general_ttypes.Amount; });
  }

declare class TrustedGetResult {
    public status: general_ttypes.APIResponse;
    public pages: number;
    public writers: TrustedInfo[];

      constructor(args?: { status: general_ttypes.APIResponse; pages: number; writers: TrustedInfo[]; });
  }

declare class SyncStateResult {
    public status: general_ttypes.APIResponse;
    public currRound: Int64;
    public lastBlock: Int64;

      constructor(args?: { status: general_ttypes.APIResponse; currRound: Int64; lastBlock: Int64; });
  }

declare class ExecuteCountGetResult {
    public status: general_ttypes.APIResponse;
    public executeCount: Int64;

      constructor(args?: { status: general_ttypes.APIResponse; executeCount: Int64; });
  }

declare class TokenFilters {
    public name: string;
    public code: string;
    public tokenStandard: number;

      constructor(args?: { name: string; code: string; tokenStandard: number; });
  }
