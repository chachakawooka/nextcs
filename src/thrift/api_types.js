//
// Autogenerated by Thrift Compiler (0.15.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');

const general_ttypes = require('./general_types');


const ttypes = module.exports = {};
ttypes.TransactionType = {
  '0' : 'TT_Transfer',
  'TT_Transfer' : 0,
  '1' : 'TT_ContractDeploy',
  'TT_ContractDeploy' : 1,
  '2' : 'TT_ContractCall',
  'TT_ContractCall' : 2,
  '3' : 'TT_ContractState',
  'TT_ContractState' : 3,
  '4' : 'TT_ContractReplenish',
  'TT_ContractReplenish' : 4,
  '5' : 'TT_TokenDeploy',
  'TT_TokenDeploy' : 5,
  '6' : 'TT_TokenTransfer',
  'TT_TokenTransfer' : 6,
  '7' : 'TT_Delegation',
  'TT_Delegation' : 7,
  '8' : 'TT_RevokeDelegation',
  'TT_RevokeDelegation' : 8,
  '9' : 'TT_Hold',
  'TT_Hold' : 9,
  '10' : 'TT_Release',
  'TT_Release' : 10,
  '11' : 'TT_CancelHold',
  'TT_CancelHold' : 11,
  '12' : 'TT_DelayedTransfer',
  'TT_DelayedTransfer' : 12,
  '13' : 'TT_UpdateBootstrapList',
  'TT_UpdateBootstrapList' : 13,
  '14' : 'TT_UpdateSettings',
  'TT_UpdateSettings' : 14,
  '15' : 'TT_Malformed',
  'TT_Malformed' : 15,
  '16' : 'TT_ContractEmitted',
  'TT_ContractEmitted' : 16,
  '17' : 'TT_Utility',
  'TT_Utility' : 17,
  '18' : 'TT_Other',
  'TT_Other' : 18
};
ttypes.SmartOperationState = {
  '0' : 'SOS_Pending',
  'SOS_Pending' : 0,
  '1' : 'SOS_Success',
  'SOS_Success' : 1,
  '2' : 'SOS_Failed',
  'SOS_Failed' : 2
};
ttypes.TransactionState = {
  '0' : 'INVALID',
  'INVALID' : 0,
  '1' : 'VALID',
  'VALID' : 1,
  '2' : 'INPROGRESS',
  'INPROGRESS' : 2
};
ttypes.TokensListSortField = {
  '0' : 'TL_Code',
  'TL_Code' : 0,
  '1' : 'TL_Name',
  'TL_Name' : 1,
  '2' : 'TL_Address',
  'TL_Address' : 2,
  '3' : 'TL_TotalSupply',
  'TL_TotalSupply' : 3,
  '4' : 'TL_HoldersCount',
  'TL_HoldersCount' : 4,
  '5' : 'TL_TransfersCount',
  'TL_TransfersCount' : 5,
  '6' : 'TL_TransactionsCount',
  'TL_TransactionsCount' : 6
};
ttypes.TokenHoldersSortField = {
  '0' : 'TH_Balance',
  'TH_Balance' : 0,
  '1' : 'TH_TransfersCount',
  'TH_TransfersCount' : 1
};
ttypes.WalletsListSort = {
  '0' : 'WL_CurrentSum',
  'WL_CurrentSum' : 0,
  '1' : 'WL_CreationTime',
  'WL_CreationTime' : 1,
  '2' : 'WL_TransactionsCount',
  'WL_TransactionsCount' : 2
};
const AmountCommission = module.exports.AmountCommission = class {
  constructor(args) {
    this.commission = 0;
    if (args) {
      if (args.commission !== undefined && args.commission !== null) {
        this.commission = args.commission;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field commission is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I16) {
          this.commission = input.readI16();
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('AmountCommission');
    if (this.commission !== null && this.commission !== undefined) {
      output.writeFieldBegin('commission', Thrift.Type.I16, 1);
      output.writeI16(this.commission);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const CumulativeAmount = module.exports.CumulativeAmount = class {
  constructor(args) {
    this.integral = new Int64(0);
    this.fraction = new Int64(0);
    if (args) {
      if (args.integral !== undefined && args.integral !== null) {
        this.integral = args.integral;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field integral is unset!');
      }
      if (args.fraction !== undefined && args.fraction !== null) {
        this.fraction = args.fraction;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fraction is unset!');
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.integral = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.fraction = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('CumulativeAmount');
    if (this.integral !== null && this.integral !== undefined) {
      output.writeFieldBegin('integral', Thrift.Type.I64, 1);
      output.writeI64(this.integral);
      output.writeFieldEnd();
    }
    if (this.fraction !== null && this.fraction !== undefined) {
      output.writeFieldBegin('fraction', Thrift.Type.I64, 2);
      output.writeI64(this.fraction);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartContractDeploy = module.exports.SmartContractDeploy = class {
  constructor(args) {
    this.sourceCode = null;
    this.byteCodeObjects = null;
    this.hashState = null;
    this.tokenStandard = null;
    if (args) {
      if (args.sourceCode !== undefined && args.sourceCode !== null) {
        this.sourceCode = args.sourceCode;
      }
      if (args.byteCodeObjects !== undefined && args.byteCodeObjects !== null) {
        this.byteCodeObjects = Thrift.copyList(args.byteCodeObjects, [general_ttypes.ByteCodeObject]);
      }
      if (args.hashState !== undefined && args.hashState !== null) {
        this.hashState = args.hashState;
      }
      if (args.tokenStandard !== undefined && args.tokenStandard !== null) {
        this.tokenStandard = args.tokenStandard;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.sourceCode = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.byteCodeObjects = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = new general_ttypes.ByteCodeObject();
            elem3.read(input);
            this.byteCodeObjects.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.hashState = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.tokenStandard = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartContractDeploy');
    if (this.sourceCode !== null && this.sourceCode !== undefined) {
      output.writeFieldBegin('sourceCode', Thrift.Type.STRING, 1);
      output.writeString(this.sourceCode);
      output.writeFieldEnd();
    }
    if (this.byteCodeObjects !== null && this.byteCodeObjects !== undefined) {
      output.writeFieldBegin('byteCodeObjects', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.byteCodeObjects.length);
      for (let iter4 in this.byteCodeObjects) {
        if (this.byteCodeObjects.hasOwnProperty(iter4)) {
          iter4 = this.byteCodeObjects[iter4];
          iter4.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.hashState !== null && this.hashState !== undefined) {
      output.writeFieldBegin('hashState', Thrift.Type.STRING, 3);
      output.writeString(this.hashState);
      output.writeFieldEnd();
    }
    if (this.tokenStandard !== null && this.tokenStandard !== undefined) {
      output.writeFieldBegin('tokenStandard', Thrift.Type.I32, 4);
      output.writeI32(this.tokenStandard);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartContract = module.exports.SmartContract = class {
  constructor(args) {
    this.address = null;
    this.deployer = null;
    this.smartContractDeploy = null;
    this.objectState = null;
    this.createTime = null;
    this.transactionsCount = null;
    if (args) {
      if (args.address !== undefined && args.address !== null) {
        this.address = args.address;
      } else {
        throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field address is unset!');
      }
      if (args.deployer !== undefined && args.deployer !== null) {
        this.deployer = args.deployer;
      }
      if (args.smartContractDeploy !== undefined && args.smartContractDeploy !== null) {
        this.smartContractDeploy = new ttypes.SmartContractDeploy(args.smartContractDeploy);
      }
      if (args.objectState !== undefined && args.objectState !== null) {
        this.objectState = args.objectState;
      }
      if (args.createTime !== undefined && args.createTime !== null) {
        this.createTime = args.createTime;
      }
      if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
        this.transactionsCount = args.transactionsCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.address = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.deployer = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.smartContractDeploy = new ttypes.SmartContractDeploy();
          this.smartContractDeploy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.objectState = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.createTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.transactionsCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartContract');
    if (this.address !== null && this.address !== undefined) {
      output.writeFieldBegin('address', Thrift.Type.STRING, 1);
      output.writeBinary(this.address);
      output.writeFieldEnd();
    }
    if (this.deployer !== null && this.deployer !== undefined) {
      output.writeFieldBegin('deployer', Thrift.Type.STRING, 2);
      output.writeBinary(this.deployer);
      output.writeFieldEnd();
    }
    if (this.smartContractDeploy !== null && this.smartContractDeploy !== undefined) {
      output.writeFieldBegin('smartContractDeploy', Thrift.Type.STRUCT, 3);
      this.smartContractDeploy.write(output);
      output.writeFieldEnd();
    }
    if (this.objectState !== null && this.objectState !== undefined) {
      output.writeFieldBegin('objectState', Thrift.Type.STRING, 4);
      output.writeBinary(this.objectState);
      output.writeFieldEnd();
    }
    if (this.createTime !== null && this.createTime !== undefined) {
      output.writeFieldBegin('createTime', Thrift.Type.I64, 5);
      output.writeI64(this.createTime);
      output.writeFieldEnd();
    }
    if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
      output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 6);
      output.writeI32(this.transactionsCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartContractInvocation = module.exports.SmartContractInvocation = class {
  constructor(args) {
    this.method = null;
    this.params = null;
    this.usedContracts = null;
    this.forgetNewState = null;
    this.smartContractDeploy = null;
    this.version = 1;
    if (args) {
      if (args.method !== undefined && args.method !== null) {
        this.method = args.method;
      }
      if (args.params !== undefined && args.params !== null) {
        this.params = Thrift.copyList(args.params, [general_ttypes.Variant]);
      }
      if (args.usedContracts !== undefined && args.usedContracts !== null) {
        this.usedContracts = Thrift.copyList(args.usedContracts, [null]);
      }
      if (args.forgetNewState !== undefined && args.forgetNewState !== null) {
        this.forgetNewState = args.forgetNewState;
      }
      if (args.smartContractDeploy !== undefined && args.smartContractDeploy !== null) {
        this.smartContractDeploy = new ttypes.SmartContractDeploy(args.smartContractDeploy);
      }
      if (args.version !== undefined && args.version !== null) {
        this.version = args.version;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.method = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.params = [];
          const _rtmp36 = input.readListBegin();
          const _size5 = _rtmp36.size || 0;
          for (let _i7 = 0; _i7 < _size5; ++_i7) {
            let elem8 = null;
            elem8 = new general_ttypes.Variant();
            elem8.read(input);
            this.params.push(elem8);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.usedContracts = [];
          const _rtmp310 = input.readListBegin();
          const _size9 = _rtmp310.size || 0;
          for (let _i11 = 0; _i11 < _size9; ++_i11) {
            let elem12 = null;
            elem12 = input.readBinary();
            this.usedContracts.push(elem12);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.BOOL) {
          this.forgetNewState = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.smartContractDeploy = new ttypes.SmartContractDeploy();
          this.smartContractDeploy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I16) {
          this.version = input.readI16();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartContractInvocation');
    if (this.method !== null && this.method !== undefined) {
      output.writeFieldBegin('method', Thrift.Type.STRING, 1);
      output.writeString(this.method);
      output.writeFieldEnd();
    }
    if (this.params !== null && this.params !== undefined) {
      output.writeFieldBegin('params', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
      for (let iter13 in this.params) {
        if (this.params.hasOwnProperty(iter13)) {
          iter13 = this.params[iter13];
          iter13.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.usedContracts !== null && this.usedContracts !== undefined) {
      output.writeFieldBegin('usedContracts', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRING, this.usedContracts.length);
      for (let iter14 in this.usedContracts) {
        if (this.usedContracts.hasOwnProperty(iter14)) {
          iter14 = this.usedContracts[iter14];
          output.writeBinary(iter14);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.forgetNewState !== null && this.forgetNewState !== undefined) {
      output.writeFieldBegin('forgetNewState', Thrift.Type.BOOL, 4);
      output.writeBool(this.forgetNewState);
      output.writeFieldEnd();
    }
    if (this.smartContractDeploy !== null && this.smartContractDeploy !== undefined) {
      output.writeFieldBegin('smartContractDeploy', Thrift.Type.STRUCT, 5);
      this.smartContractDeploy.write(output);
      output.writeFieldEnd();
    }
    if (this.version !== null && this.version !== undefined) {
      output.writeFieldBegin('version', Thrift.Type.I16, 6);
      output.writeI16(this.version);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TransactionId = module.exports.TransactionId = class {
  constructor(args) {
    this.poolSeq = null;
    this.index = null;
    if (args) {
      if (args.poolSeq !== undefined && args.poolSeq !== null) {
        this.poolSeq = args.poolSeq;
      }
      if (args.index !== undefined && args.index !== null) {
        this.index = args.index;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.poolSeq = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.index = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TransactionId');
    if (this.poolSeq !== null && this.poolSeq !== undefined) {
      output.writeFieldBegin('poolSeq', Thrift.Type.I64, 1);
      output.writeI64(this.poolSeq);
      output.writeFieldEnd();
    }
    if (this.index !== null && this.index !== undefined) {
      output.writeFieldBegin('index', Thrift.Type.I32, 2);
      output.writeI32(this.index);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenDeployTransInfo = module.exports.TokenDeployTransInfo = class {
  constructor(args) {
    this.name = null;
    this.code = null;
    this.tokenStandard = null;
    this.state = null;
    this.stateTransaction = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.tokenStandard !== undefined && args.tokenStandard !== null) {
        this.tokenStandard = args.tokenStandard;
      }
      if (args.state !== undefined && args.state !== null) {
        this.state = args.state;
      }
      if (args.stateTransaction !== undefined && args.stateTransaction !== null) {
        this.stateTransaction = new ttypes.TransactionId(args.stateTransaction);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.code = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.tokenStandard = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.state = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.stateTransaction = new ttypes.TransactionId();
          this.stateTransaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenDeployTransInfo');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.STRING, 2);
      output.writeString(this.code);
      output.writeFieldEnd();
    }
    if (this.tokenStandard !== null && this.tokenStandard !== undefined) {
      output.writeFieldBegin('tokenStandard', Thrift.Type.I32, 3);
      output.writeI32(this.tokenStandard);
      output.writeFieldEnd();
    }
    if (this.state !== null && this.state !== undefined) {
      output.writeFieldBegin('state', Thrift.Type.I32, 4);
      output.writeI32(this.state);
      output.writeFieldEnd();
    }
    if (this.stateTransaction !== null && this.stateTransaction !== undefined) {
      output.writeFieldBegin('stateTransaction', Thrift.Type.STRUCT, 5);
      this.stateTransaction.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenTransferTransInfo = module.exports.TokenTransferTransInfo = class {
  constructor(args) {
    this.code = null;
    this.sender = null;
    this.receiver = null;
    this.amount = null;
    this.state = null;
    this.stateTransaction = null;
    this.transferSuccess = null;
    if (args) {
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.sender !== undefined && args.sender !== null) {
        this.sender = args.sender;
      }
      if (args.receiver !== undefined && args.receiver !== null) {
        this.receiver = args.receiver;
      }
      if (args.amount !== undefined && args.amount !== null) {
        this.amount = args.amount;
      }
      if (args.state !== undefined && args.state !== null) {
        this.state = args.state;
      }
      if (args.stateTransaction !== undefined && args.stateTransaction !== null) {
        this.stateTransaction = new ttypes.TransactionId(args.stateTransaction);
      }
      if (args.transferSuccess !== undefined && args.transferSuccess !== null) {
        this.transferSuccess = args.transferSuccess;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.code = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.sender = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.receiver = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.amount = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.state = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRUCT) {
          this.stateTransaction = new ttypes.TransactionId();
          this.stateTransaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.transferSuccess = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenTransferTransInfo');
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.STRING, 1);
      output.writeString(this.code);
      output.writeFieldEnd();
    }
    if (this.sender !== null && this.sender !== undefined) {
      output.writeFieldBegin('sender', Thrift.Type.STRING, 2);
      output.writeBinary(this.sender);
      output.writeFieldEnd();
    }
    if (this.receiver !== null && this.receiver !== undefined) {
      output.writeFieldBegin('receiver', Thrift.Type.STRING, 3);
      output.writeBinary(this.receiver);
      output.writeFieldEnd();
    }
    if (this.amount !== null && this.amount !== undefined) {
      output.writeFieldBegin('amount', Thrift.Type.STRING, 4);
      output.writeString(this.amount);
      output.writeFieldEnd();
    }
    if (this.state !== null && this.state !== undefined) {
      output.writeFieldBegin('state', Thrift.Type.I32, 5);
      output.writeI32(this.state);
      output.writeFieldEnd();
    }
    if (this.stateTransaction !== null && this.stateTransaction !== undefined) {
      output.writeFieldBegin('stateTransaction', Thrift.Type.STRUCT, 6);
      this.stateTransaction.write(output);
      output.writeFieldEnd();
    }
    if (this.transferSuccess !== null && this.transferSuccess !== undefined) {
      output.writeFieldBegin('transferSuccess', Thrift.Type.BOOL, 7);
      output.writeBool(this.transferSuccess);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartDeployTransInfo = module.exports.SmartDeployTransInfo = class {
  constructor(args) {
    this.state = null;
    this.stateTransaction = null;
    if (args) {
      if (args.state !== undefined && args.state !== null) {
        this.state = args.state;
      }
      if (args.stateTransaction !== undefined && args.stateTransaction !== null) {
        this.stateTransaction = new ttypes.TransactionId(args.stateTransaction);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.state = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.stateTransaction = new ttypes.TransactionId();
          this.stateTransaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartDeployTransInfo');
    if (this.state !== null && this.state !== undefined) {
      output.writeFieldBegin('state', Thrift.Type.I32, 1);
      output.writeI32(this.state);
      output.writeFieldEnd();
    }
    if (this.stateTransaction !== null && this.stateTransaction !== undefined) {
      output.writeFieldBegin('stateTransaction', Thrift.Type.STRUCT, 2);
      this.stateTransaction.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartExecutionTransInfo = module.exports.SmartExecutionTransInfo = class {
  constructor(args) {
    this.method = null;
    this.params = null;
    this.state = null;
    this.stateTransaction = null;
    if (args) {
      if (args.method !== undefined && args.method !== null) {
        this.method = args.method;
      }
      if (args.params !== undefined && args.params !== null) {
        this.params = Thrift.copyList(args.params, [general_ttypes.Variant]);
      }
      if (args.state !== undefined && args.state !== null) {
        this.state = args.state;
      }
      if (args.stateTransaction !== undefined && args.stateTransaction !== null) {
        this.stateTransaction = new ttypes.TransactionId(args.stateTransaction);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.method = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.params = [];
          const _rtmp316 = input.readListBegin();
          const _size15 = _rtmp316.size || 0;
          for (let _i17 = 0; _i17 < _size15; ++_i17) {
            let elem18 = null;
            elem18 = new general_ttypes.Variant();
            elem18.read(input);
            this.params.push(elem18);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.state = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.stateTransaction = new ttypes.TransactionId();
          this.stateTransaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartExecutionTransInfo');
    if (this.method !== null && this.method !== undefined) {
      output.writeFieldBegin('method', Thrift.Type.STRING, 1);
      output.writeString(this.method);
      output.writeFieldEnd();
    }
    if (this.params !== null && this.params !== undefined) {
      output.writeFieldBegin('params', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
      for (let iter19 in this.params) {
        if (this.params.hasOwnProperty(iter19)) {
          iter19 = this.params[iter19];
          iter19.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.state !== null && this.state !== undefined) {
      output.writeFieldBegin('state', Thrift.Type.I32, 3);
      output.writeI32(this.state);
      output.writeFieldEnd();
    }
    if (this.stateTransaction !== null && this.stateTransaction !== undefined) {
      output.writeFieldBegin('stateTransaction', Thrift.Type.STRUCT, 4);
      this.stateTransaction.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ExtraFee = module.exports.ExtraFee = class {
  constructor(args) {
    this.sum = null;
    this.comment = null;
    this.transactionId = null;
    if (args) {
      if (args.sum !== undefined && args.sum !== null) {
        this.sum = new general_ttypes.Amount(args.sum);
      }
      if (args.comment !== undefined && args.comment !== null) {
        this.comment = args.comment;
      }
      if (args.transactionId !== undefined && args.transactionId !== null) {
        this.transactionId = new ttypes.TransactionId(args.transactionId);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.sum = new general_ttypes.Amount();
          this.sum.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.comment = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.transactionId = new ttypes.TransactionId();
          this.transactionId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ExtraFee');
    if (this.sum !== null && this.sum !== undefined) {
      output.writeFieldBegin('sum', Thrift.Type.STRUCT, 1);
      this.sum.write(output);
      output.writeFieldEnd();
    }
    if (this.comment !== null && this.comment !== undefined) {
      output.writeFieldBegin('comment', Thrift.Type.STRING, 2);
      output.writeString(this.comment);
      output.writeFieldEnd();
    }
    if (this.transactionId !== null && this.transactionId !== undefined) {
      output.writeFieldBegin('transactionId', Thrift.Type.STRUCT, 3);
      this.transactionId.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartStateTransInfo = module.exports.SmartStateTransInfo = class {
  constructor(args) {
    this.success = null;
    this.executionFee = null;
    this.returnValue = null;
    this.startTransaction = null;
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.executionFee !== undefined && args.executionFee !== null) {
        this.executionFee = new general_ttypes.Amount(args.executionFee);
      }
      if (args.returnValue !== undefined && args.returnValue !== null) {
        this.returnValue = new general_ttypes.Variant(args.returnValue);
      }
      if (args.startTransaction !== undefined && args.startTransaction !== null) {
        this.startTransaction = new ttypes.TransactionId(args.startTransaction);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.executionFee = new general_ttypes.Amount();
          this.executionFee.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.returnValue = new general_ttypes.Variant();
          this.returnValue.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.startTransaction = new ttypes.TransactionId();
          this.startTransaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartStateTransInfo');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 1);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.executionFee !== null && this.executionFee !== undefined) {
      output.writeFieldBegin('executionFee', Thrift.Type.STRUCT, 2);
      this.executionFee.write(output);
      output.writeFieldEnd();
    }
    if (this.returnValue !== null && this.returnValue !== undefined) {
      output.writeFieldBegin('returnValue', Thrift.Type.STRUCT, 3);
      this.returnValue.write(output);
      output.writeFieldEnd();
    }
    if (this.startTransaction !== null && this.startTransaction !== undefined) {
      output.writeFieldBegin('startTransaction', Thrift.Type.STRUCT, 4);
      this.startTransaction.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartTransInfo = module.exports.SmartTransInfo = class {
  constructor(args) {
    this.v_tokenDeploy = null;
    this.v_tokenTransfer = null;
    this.v_smartDeploy = null;
    this.v_smartExecution = null;
    this.v_smartState = null;
    if (args) {
      if (args.v_tokenDeploy !== undefined && args.v_tokenDeploy !== null) {
        this.v_tokenDeploy = new ttypes.TokenDeployTransInfo(args.v_tokenDeploy);
      }
      if (args.v_tokenTransfer !== undefined && args.v_tokenTransfer !== null) {
        this.v_tokenTransfer = new ttypes.TokenTransferTransInfo(args.v_tokenTransfer);
      }
      if (args.v_smartDeploy !== undefined && args.v_smartDeploy !== null) {
        this.v_smartDeploy = new ttypes.SmartDeployTransInfo(args.v_smartDeploy);
      }
      if (args.v_smartExecution !== undefined && args.v_smartExecution !== null) {
        this.v_smartExecution = new ttypes.SmartExecutionTransInfo(args.v_smartExecution);
      }
      if (args.v_smartState !== undefined && args.v_smartState !== null) {
        this.v_smartState = new ttypes.SmartStateTransInfo(args.v_smartState);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.v_tokenDeploy = new ttypes.TokenDeployTransInfo();
          this.v_tokenDeploy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.v_tokenTransfer = new ttypes.TokenTransferTransInfo();
          this.v_tokenTransfer.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.v_smartDeploy = new ttypes.SmartDeployTransInfo();
          this.v_smartDeploy.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.v_smartExecution = new ttypes.SmartExecutionTransInfo();
          this.v_smartExecution.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.v_smartState = new ttypes.SmartStateTransInfo();
          this.v_smartState.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartTransInfo');
    if (this.v_tokenDeploy !== null && this.v_tokenDeploy !== undefined) {
      output.writeFieldBegin('v_tokenDeploy', Thrift.Type.STRUCT, 1);
      this.v_tokenDeploy.write(output);
      output.writeFieldEnd();
    }
    if (this.v_tokenTransfer !== null && this.v_tokenTransfer !== undefined) {
      output.writeFieldBegin('v_tokenTransfer', Thrift.Type.STRUCT, 2);
      this.v_tokenTransfer.write(output);
      output.writeFieldEnd();
    }
    if (this.v_smartDeploy !== null && this.v_smartDeploy !== undefined) {
      output.writeFieldBegin('v_smartDeploy', Thrift.Type.STRUCT, 3);
      this.v_smartDeploy.write(output);
      output.writeFieldEnd();
    }
    if (this.v_smartExecution !== null && this.v_smartExecution !== undefined) {
      output.writeFieldBegin('v_smartExecution', Thrift.Type.STRUCT, 4);
      this.v_smartExecution.write(output);
      output.writeFieldEnd();
    }
    if (this.v_smartState !== null && this.v_smartState !== undefined) {
      output.writeFieldBegin('v_smartState', Thrift.Type.STRUCT, 5);
      this.v_smartState.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Transaction = module.exports.Transaction = class {
  constructor(args) {
    this.id = null;
    this.source = null;
    this.target = null;
    this.amount = null;
    this.balance = null;
    this.currency = null;
    this.signature = null;
    this.smartContract = null;
    this.fee = null;
    this.timeCreation = null;
    this.userFields = null;
    this.type = null;
    this.smartInfo = null;
    this.extraFee = null;
    this.poolNumber = null;
    this.usedContracts = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.source !== undefined && args.source !== null) {
        this.source = args.source;
      }
      if (args.target !== undefined && args.target !== null) {
        this.target = args.target;
      }
      if (args.amount !== undefined && args.amount !== null) {
        this.amount = new general_ttypes.Amount(args.amount);
      }
      if (args.balance !== undefined && args.balance !== null) {
        this.balance = new general_ttypes.Amount(args.balance);
      }
      if (args.currency !== undefined && args.currency !== null) {
        this.currency = args.currency;
      }
      if (args.signature !== undefined && args.signature !== null) {
        this.signature = args.signature;
      }
      if (args.smartContract !== undefined && args.smartContract !== null) {
        this.smartContract = new ttypes.SmartContractInvocation(args.smartContract);
      }
      if (args.fee !== undefined && args.fee !== null) {
        this.fee = new ttypes.AmountCommission(args.fee);
      }
      if (args.timeCreation !== undefined && args.timeCreation !== null) {
        this.timeCreation = args.timeCreation;
      }
      if (args.userFields !== undefined && args.userFields !== null) {
        this.userFields = args.userFields;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.smartInfo !== undefined && args.smartInfo !== null) {
        this.smartInfo = new ttypes.SmartTransInfo(args.smartInfo);
      }
      if (args.extraFee !== undefined && args.extraFee !== null) {
        this.extraFee = Thrift.copyList(args.extraFee, [ttypes.ExtraFee]);
      }
      if (args.poolNumber !== undefined && args.poolNumber !== null) {
        this.poolNumber = args.poolNumber;
      }
      if (args.usedContracts !== undefined && args.usedContracts !== null) {
        this.usedContracts = Thrift.copyList(args.usedContracts, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.id = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.source = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.target = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.amount = new general_ttypes.Amount();
          this.amount.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.balance = new general_ttypes.Amount();
          this.balance.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BYTE) {
          this.currency = input.readByte();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.signature = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRUCT) {
          this.smartContract = new ttypes.SmartContractInvocation();
          this.smartContract.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRUCT) {
          this.fee = new ttypes.AmountCommission();
          this.fee.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I64) {
          this.timeCreation = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.userFields = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRUCT) {
          this.smartInfo = new ttypes.SmartTransInfo();
          this.smartInfo.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.LIST) {
          this.extraFee = [];
          const _rtmp321 = input.readListBegin();
          const _size20 = _rtmp321.size || 0;
          for (let _i22 = 0; _i22 < _size20; ++_i22) {
            let elem23 = null;
            elem23 = new ttypes.ExtraFee();
            elem23.read(input);
            this.extraFee.push(elem23);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.I64) {
          this.poolNumber = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 16:
        if (ftype == Thrift.Type.LIST) {
          this.usedContracts = [];
          const _rtmp325 = input.readListBegin();
          const _size24 = _rtmp325.size || 0;
          for (let _i26 = 0; _i26 < _size24; ++_i26) {
            let elem27 = null;
            elem27 = input.readBinary();
            this.usedContracts.push(elem27);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Transaction');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I64, 1);
      output.writeI64(this.id);
      output.writeFieldEnd();
    }
    if (this.source !== null && this.source !== undefined) {
      output.writeFieldBegin('source', Thrift.Type.STRING, 2);
      output.writeBinary(this.source);
      output.writeFieldEnd();
    }
    if (this.target !== null && this.target !== undefined) {
      output.writeFieldBegin('target', Thrift.Type.STRING, 3);
      output.writeBinary(this.target);
      output.writeFieldEnd();
    }
    if (this.amount !== null && this.amount !== undefined) {
      output.writeFieldBegin('amount', Thrift.Type.STRUCT, 4);
      this.amount.write(output);
      output.writeFieldEnd();
    }
    if (this.balance !== null && this.balance !== undefined) {
      output.writeFieldBegin('balance', Thrift.Type.STRUCT, 5);
      this.balance.write(output);
      output.writeFieldEnd();
    }
    if (this.currency !== null && this.currency !== undefined) {
      output.writeFieldBegin('currency', Thrift.Type.BYTE, 6);
      output.writeByte(this.currency);
      output.writeFieldEnd();
    }
    if (this.signature !== null && this.signature !== undefined) {
      output.writeFieldBegin('signature', Thrift.Type.STRING, 7);
      output.writeBinary(this.signature);
      output.writeFieldEnd();
    }
    if (this.smartContract !== null && this.smartContract !== undefined) {
      output.writeFieldBegin('smartContract', Thrift.Type.STRUCT, 8);
      this.smartContract.write(output);
      output.writeFieldEnd();
    }
    if (this.fee !== null && this.fee !== undefined) {
      output.writeFieldBegin('fee', Thrift.Type.STRUCT, 9);
      this.fee.write(output);
      output.writeFieldEnd();
    }
    if (this.timeCreation !== null && this.timeCreation !== undefined) {
      output.writeFieldBegin('timeCreation', Thrift.Type.I64, 10);
      output.writeI64(this.timeCreation);
      output.writeFieldEnd();
    }
    if (this.userFields !== null && this.userFields !== undefined) {
      output.writeFieldBegin('userFields', Thrift.Type.STRING, 11);
      output.writeBinary(this.userFields);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 12);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.smartInfo !== null && this.smartInfo !== undefined) {
      output.writeFieldBegin('smartInfo', Thrift.Type.STRUCT, 13);
      this.smartInfo.write(output);
      output.writeFieldEnd();
    }
    if (this.extraFee !== null && this.extraFee !== undefined) {
      output.writeFieldBegin('extraFee', Thrift.Type.LIST, 14);
      output.writeListBegin(Thrift.Type.STRUCT, this.extraFee.length);
      for (let iter28 in this.extraFee) {
        if (this.extraFee.hasOwnProperty(iter28)) {
          iter28 = this.extraFee[iter28];
          iter28.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.poolNumber !== null && this.poolNumber !== undefined) {
      output.writeFieldBegin('poolNumber', Thrift.Type.I64, 15);
      output.writeI64(this.poolNumber);
      output.writeFieldEnd();
    }
    if (this.usedContracts !== null && this.usedContracts !== undefined) {
      output.writeFieldBegin('usedContracts', Thrift.Type.LIST, 16);
      output.writeListBegin(Thrift.Type.STRING, this.usedContracts.length);
      for (let iter29 in this.usedContracts) {
        if (this.usedContracts.hasOwnProperty(iter29)) {
          iter29 = this.usedContracts[iter29];
          output.writeBinary(iter29);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SealedTransaction = module.exports.SealedTransaction = class {
  constructor(args) {
    this.id = null;
    this.trxn = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = new ttypes.TransactionId(args.id);
      }
      if (args.trxn !== undefined && args.trxn !== null) {
        this.trxn = new ttypes.Transaction(args.trxn);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.id = new ttypes.TransactionId();
          this.id.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.trxn = new ttypes.Transaction();
          this.trxn.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SealedTransaction');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
      this.id.write(output);
      output.writeFieldEnd();
    }
    if (this.trxn !== null && this.trxn !== undefined) {
      output.writeFieldBegin('trxn', Thrift.Type.STRUCT, 2);
      this.trxn.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ShortTransaction = module.exports.ShortTransaction = class {
  constructor(args) {
    this.id = null;
    this.source = null;
    this.target = null;
    this.amount = null;
    this.fee = null;
    this.timeCreation = null;
    this.currency = null;
    this.type = null;
    this.userFields = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = new ttypes.TransactionId(args.id);
      }
      if (args.source !== undefined && args.source !== null) {
        this.source = args.source;
      }
      if (args.target !== undefined && args.target !== null) {
        this.target = args.target;
      }
      if (args.amount !== undefined && args.amount !== null) {
        this.amount = new general_ttypes.Amount(args.amount);
      }
      if (args.fee !== undefined && args.fee !== null) {
        this.fee = new ttypes.AmountCommission(args.fee);
      }
      if (args.timeCreation !== undefined && args.timeCreation !== null) {
        this.timeCreation = args.timeCreation;
      }
      if (args.currency !== undefined && args.currency !== null) {
        this.currency = args.currency;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.userFields !== undefined && args.userFields !== null) {
        this.userFields = args.userFields;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.id = new ttypes.TransactionId();
          this.id.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.source = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.target = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.amount = new general_ttypes.Amount();
          this.amount.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.fee = new ttypes.AmountCommission();
          this.fee.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.timeCreation = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.BYTE) {
          this.currency = input.readByte();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.type = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.userFields = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ShortTransaction');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
      this.id.write(output);
      output.writeFieldEnd();
    }
    if (this.source !== null && this.source !== undefined) {
      output.writeFieldBegin('source', Thrift.Type.STRING, 2);
      output.writeBinary(this.source);
      output.writeFieldEnd();
    }
    if (this.target !== null && this.target !== undefined) {
      output.writeFieldBegin('target', Thrift.Type.STRING, 3);
      output.writeBinary(this.target);
      output.writeFieldEnd();
    }
    if (this.amount !== null && this.amount !== undefined) {
      output.writeFieldBegin('amount', Thrift.Type.STRUCT, 4);
      this.amount.write(output);
      output.writeFieldEnd();
    }
    if (this.fee !== null && this.fee !== undefined) {
      output.writeFieldBegin('fee', Thrift.Type.STRUCT, 5);
      this.fee.write(output);
      output.writeFieldEnd();
    }
    if (this.timeCreation !== null && this.timeCreation !== undefined) {
      output.writeFieldBegin('timeCreation', Thrift.Type.I64, 6);
      output.writeI64(this.timeCreation);
      output.writeFieldEnd();
    }
    if (this.currency !== null && this.currency !== undefined) {
      output.writeFieldBegin('currency', Thrift.Type.BYTE, 7);
      output.writeByte(this.currency);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.I32, 8);
      output.writeI32(this.type);
      output.writeFieldEnd();
    }
    if (this.userFields !== null && this.userFields !== undefined) {
      output.writeFieldBegin('userFields', Thrift.Type.STRING, 10);
      output.writeBinary(this.userFields);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Pool = module.exports.Pool = class {
  constructor(args) {
    this.hash = null;
    this.prevHash = null;
    this.time = null;
    this.transactionsCount = null;
    this.poolNumber = null;
    this.writer = null;
    this.totalFee = null;
    this.confidants = null;
    this.realTrusted = null;
    this.numberTrusted = null;
    if (args) {
      if (args.hash !== undefined && args.hash !== null) {
        this.hash = args.hash;
      }
      if (args.prevHash !== undefined && args.prevHash !== null) {
        this.prevHash = args.prevHash;
      }
      if (args.time !== undefined && args.time !== null) {
        this.time = args.time;
      }
      if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
        this.transactionsCount = args.transactionsCount;
      }
      if (args.poolNumber !== undefined && args.poolNumber !== null) {
        this.poolNumber = args.poolNumber;
      }
      if (args.writer !== undefined && args.writer !== null) {
        this.writer = args.writer;
      }
      if (args.totalFee !== undefined && args.totalFee !== null) {
        this.totalFee = new general_ttypes.Amount(args.totalFee);
      }
      if (args.confidants !== undefined && args.confidants !== null) {
        this.confidants = Thrift.copyList(args.confidants, [null]);
      }
      if (args.realTrusted !== undefined && args.realTrusted !== null) {
        this.realTrusted = args.realTrusted;
      }
      if (args.numberTrusted !== undefined && args.numberTrusted !== null) {
        this.numberTrusted = args.numberTrusted;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.hash = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.prevHash = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.time = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.transactionsCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.poolNumber = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.writer = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRUCT) {
          this.totalFee = new general_ttypes.Amount();
          this.totalFee.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.LIST) {
          this.confidants = [];
          const _rtmp331 = input.readListBegin();
          const _size30 = _rtmp331.size || 0;
          for (let _i32 = 0; _i32 < _size30; ++_i32) {
            let elem33 = null;
            elem33 = input.readBinary();
            this.confidants.push(elem33);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I64) {
          this.realTrusted = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.BYTE) {
          this.numberTrusted = input.readByte();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Pool');
    if (this.hash !== null && this.hash !== undefined) {
      output.writeFieldBegin('hash', Thrift.Type.STRING, 1);
      output.writeBinary(this.hash);
      output.writeFieldEnd();
    }
    if (this.prevHash !== null && this.prevHash !== undefined) {
      output.writeFieldBegin('prevHash', Thrift.Type.STRING, 2);
      output.writeBinary(this.prevHash);
      output.writeFieldEnd();
    }
    if (this.time !== null && this.time !== undefined) {
      output.writeFieldBegin('time', Thrift.Type.I64, 3);
      output.writeI64(this.time);
      output.writeFieldEnd();
    }
    if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
      output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 4);
      output.writeI32(this.transactionsCount);
      output.writeFieldEnd();
    }
    if (this.poolNumber !== null && this.poolNumber !== undefined) {
      output.writeFieldBegin('poolNumber', Thrift.Type.I64, 5);
      output.writeI64(this.poolNumber);
      output.writeFieldEnd();
    }
    if (this.writer !== null && this.writer !== undefined) {
      output.writeFieldBegin('writer', Thrift.Type.STRING, 6);
      output.writeBinary(this.writer);
      output.writeFieldEnd();
    }
    if (this.totalFee !== null && this.totalFee !== undefined) {
      output.writeFieldBegin('totalFee', Thrift.Type.STRUCT, 7);
      this.totalFee.write(output);
      output.writeFieldEnd();
    }
    if (this.confidants !== null && this.confidants !== undefined) {
      output.writeFieldBegin('confidants', Thrift.Type.LIST, 8);
      output.writeListBegin(Thrift.Type.STRING, this.confidants.length);
      for (let iter34 in this.confidants) {
        if (this.confidants.hasOwnProperty(iter34)) {
          iter34 = this.confidants[iter34];
          output.writeBinary(iter34);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.realTrusted !== null && this.realTrusted !== undefined) {
      output.writeFieldBegin('realTrusted', Thrift.Type.I64, 9);
      output.writeI64(this.realTrusted);
      output.writeFieldEnd();
    }
    if (this.numberTrusted !== null && this.numberTrusted !== undefined) {
      output.writeFieldBegin('numberTrusted', Thrift.Type.BYTE, 10);
      output.writeByte(this.numberTrusted);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const DelegatedItem = module.exports.DelegatedItem = class {
  constructor(args) {
    this.wallet = null;
    this.sum = null;
    this.validUntil = null;
    if (args) {
      if (args.wallet !== undefined && args.wallet !== null) {
        this.wallet = args.wallet;
      }
      if (args.sum !== undefined && args.sum !== null) {
        this.sum = new general_ttypes.Amount(args.sum);
      }
      if (args.validUntil !== undefined && args.validUntil !== null) {
        this.validUntil = args.validUntil;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.wallet = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.sum = new general_ttypes.Amount();
          this.sum.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.validUntil = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('DelegatedItem');
    if (this.wallet !== null && this.wallet !== undefined) {
      output.writeFieldBegin('wallet', Thrift.Type.STRING, 1);
      output.writeBinary(this.wallet);
      output.writeFieldEnd();
    }
    if (this.sum !== null && this.sum !== undefined) {
      output.writeFieldBegin('sum', Thrift.Type.STRUCT, 2);
      this.sum.write(output);
      output.writeFieldEnd();
    }
    if (this.validUntil !== null && this.validUntil !== undefined) {
      output.writeFieldBegin('validUntil', Thrift.Type.I64, 3);
      output.writeI64(this.validUntil);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const Delegated = module.exports.Delegated = class {
  constructor(args) {
    this.incoming = null;
    this.outgoing = null;
    this.donors = null;
    this.recipients = null;
    if (args) {
      if (args.incoming !== undefined && args.incoming !== null) {
        this.incoming = new general_ttypes.Amount(args.incoming);
      }
      if (args.outgoing !== undefined && args.outgoing !== null) {
        this.outgoing = new general_ttypes.Amount(args.outgoing);
      }
      if (args.donors !== undefined && args.donors !== null) {
        this.donors = Thrift.copyList(args.donors, [ttypes.DelegatedItem]);
      }
      if (args.recipients !== undefined && args.recipients !== null) {
        this.recipients = Thrift.copyList(args.recipients, [ttypes.DelegatedItem]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.incoming = new general_ttypes.Amount();
          this.incoming.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.outgoing = new general_ttypes.Amount();
          this.outgoing.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.donors = [];
          const _rtmp336 = input.readListBegin();
          const _size35 = _rtmp336.size || 0;
          for (let _i37 = 0; _i37 < _size35; ++_i37) {
            let elem38 = null;
            elem38 = new ttypes.DelegatedItem();
            elem38.read(input);
            this.donors.push(elem38);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.recipients = [];
          const _rtmp340 = input.readListBegin();
          const _size39 = _rtmp340.size || 0;
          for (let _i41 = 0; _i41 < _size39; ++_i41) {
            let elem42 = null;
            elem42 = new ttypes.DelegatedItem();
            elem42.read(input);
            this.recipients.push(elem42);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('Delegated');
    if (this.incoming !== null && this.incoming !== undefined) {
      output.writeFieldBegin('incoming', Thrift.Type.STRUCT, 1);
      this.incoming.write(output);
      output.writeFieldEnd();
    }
    if (this.outgoing !== null && this.outgoing !== undefined) {
      output.writeFieldBegin('outgoing', Thrift.Type.STRUCT, 2);
      this.outgoing.write(output);
      output.writeFieldEnd();
    }
    if (this.donors !== null && this.donors !== undefined) {
      output.writeFieldBegin('donors', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.donors.length);
      for (let iter43 in this.donors) {
        if (this.donors.hasOwnProperty(iter43)) {
          iter43 = this.donors[iter43];
          iter43.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.recipients !== null && this.recipients !== undefined) {
      output.writeFieldBegin('recipients', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.recipients.length);
      for (let iter44 in this.recipients) {
        if (this.recipients.hasOwnProperty(iter44)) {
          iter44 = this.recipients[iter44];
          iter44.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const WalletData = module.exports.WalletData = class {
  constructor(args) {
    this.walletId = null;
    this.balance = null;
    this.lastTransactionId = null;
    this.delegated = null;
    if (args) {
      if (args.walletId !== undefined && args.walletId !== null) {
        this.walletId = args.walletId;
      }
      if (args.balance !== undefined && args.balance !== null) {
        this.balance = new general_ttypes.Amount(args.balance);
      }
      if (args.lastTransactionId !== undefined && args.lastTransactionId !== null) {
        this.lastTransactionId = args.lastTransactionId;
      }
      if (args.delegated !== undefined && args.delegated !== null) {
        this.delegated = new ttypes.Delegated(args.delegated);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.walletId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.balance = new general_ttypes.Amount();
          this.balance.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.lastTransactionId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.delegated = new ttypes.Delegated();
          this.delegated.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('WalletData');
    if (this.walletId !== null && this.walletId !== undefined) {
      output.writeFieldBegin('walletId', Thrift.Type.I32, 1);
      output.writeI32(this.walletId);
      output.writeFieldEnd();
    }
    if (this.balance !== null && this.balance !== undefined) {
      output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
      this.balance.write(output);
      output.writeFieldEnd();
    }
    if (this.lastTransactionId !== null && this.lastTransactionId !== undefined) {
      output.writeFieldBegin('lastTransactionId', Thrift.Type.I64, 3);
      output.writeI64(this.lastTransactionId);
      output.writeFieldEnd();
    }
    if (this.delegated !== null && this.delegated !== undefined) {
      output.writeFieldBegin('delegated', Thrift.Type.STRUCT, 4);
      this.delegated.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PeriodStats = module.exports.PeriodStats = class {
  constructor(args) {
    this.periodDuration = null;
    this.poolsCount = null;
    this.transactionsCount = null;
    this.balancePerCurrency = null;
    this.smartContractsCount = null;
    this.transactionsSmartCount = null;
    if (args) {
      if (args.periodDuration !== undefined && args.periodDuration !== null) {
        this.periodDuration = args.periodDuration;
      }
      if (args.poolsCount !== undefined && args.poolsCount !== null) {
        this.poolsCount = args.poolsCount;
      }
      if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
        this.transactionsCount = args.transactionsCount;
      }
      if (args.balancePerCurrency !== undefined && args.balancePerCurrency !== null) {
        this.balancePerCurrency = Thrift.copyMap(args.balancePerCurrency, [ttypes.CumulativeAmount]);
      }
      if (args.smartContractsCount !== undefined && args.smartContractsCount !== null) {
        this.smartContractsCount = args.smartContractsCount;
      }
      if (args.transactionsSmartCount !== undefined && args.transactionsSmartCount !== null) {
        this.transactionsSmartCount = args.transactionsSmartCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.periodDuration = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.poolsCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.transactionsCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.MAP) {
          this.balancePerCurrency = {};
          const _rtmp346 = input.readMapBegin();
          const _size45 = _rtmp346.size || 0;
          for (let _i47 = 0; _i47 < _size45; ++_i47) {
            let key48 = null;
            let val49 = null;
            key48 = input.readByte();
            val49 = new ttypes.CumulativeAmount();
            val49.read(input);
            this.balancePerCurrency[key48] = val49;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I32) {
          this.smartContractsCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.transactionsSmartCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PeriodStats');
    if (this.periodDuration !== null && this.periodDuration !== undefined) {
      output.writeFieldBegin('periodDuration', Thrift.Type.I64, 1);
      output.writeI64(this.periodDuration);
      output.writeFieldEnd();
    }
    if (this.poolsCount !== null && this.poolsCount !== undefined) {
      output.writeFieldBegin('poolsCount', Thrift.Type.I32, 2);
      output.writeI32(this.poolsCount);
      output.writeFieldEnd();
    }
    if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
      output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 3);
      output.writeI32(this.transactionsCount);
      output.writeFieldEnd();
    }
    if (this.balancePerCurrency !== null && this.balancePerCurrency !== undefined) {
      output.writeFieldBegin('balancePerCurrency', Thrift.Type.MAP, 4);
      output.writeMapBegin(Thrift.Type.BYTE, Thrift.Type.STRUCT, Thrift.objectLength(this.balancePerCurrency));
      for (let kiter50 in this.balancePerCurrency) {
        if (this.balancePerCurrency.hasOwnProperty(kiter50)) {
          let viter51 = this.balancePerCurrency[kiter50];
          output.writeByte(kiter50);
          viter51.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.smartContractsCount !== null && this.smartContractsCount !== undefined) {
      output.writeFieldBegin('smartContractsCount', Thrift.Type.I32, 5);
      output.writeI32(this.smartContractsCount);
      output.writeFieldEnd();
    }
    if (this.transactionsSmartCount !== null && this.transactionsSmartCount !== undefined) {
      output.writeFieldBegin('transactionsSmartCount', Thrift.Type.I32, 6);
      output.writeI32(this.transactionsSmartCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const WalletDataGetResult = module.exports.WalletDataGetResult = class {
  constructor(args) {
    this.status = null;
    this.walletData = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.walletData !== undefined && args.walletData !== null) {
        this.walletData = new ttypes.WalletData(args.walletData);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.walletData = new ttypes.WalletData();
          this.walletData.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('WalletDataGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.walletData !== null && this.walletData !== undefined) {
      output.writeFieldBegin('walletData', Thrift.Type.STRUCT, 2);
      this.walletData.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const WalletIdGetResult = module.exports.WalletIdGetResult = class {
  constructor(args) {
    this.status = null;
    this.walletId = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.walletId !== undefined && args.walletId !== null) {
        this.walletId = args.walletId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.walletId = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('WalletIdGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.walletId !== null && this.walletId !== undefined) {
      output.writeFieldBegin('walletId', Thrift.Type.I32, 2);
      output.writeI32(this.walletId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const WalletTransactionsCountGetResult = module.exports.WalletTransactionsCountGetResult = class {
  constructor(args) {
    this.status = null;
    this.lastTransactionInnerId = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.lastTransactionInnerId !== undefined && args.lastTransactionInnerId !== null) {
        this.lastTransactionInnerId = args.lastTransactionInnerId;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.lastTransactionInnerId = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('WalletTransactionsCountGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.lastTransactionInnerId !== null && this.lastTransactionInnerId !== undefined) {
      output.writeFieldBegin('lastTransactionInnerId', Thrift.Type.I64, 2);
      output.writeI64(this.lastTransactionInnerId);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const WalletBalanceGetResult = module.exports.WalletBalanceGetResult = class {
  constructor(args) {
    this.status = null;
    this.balance = null;
    this.delegated = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.balance !== undefined && args.balance !== null) {
        this.balance = new general_ttypes.Amount(args.balance);
      }
      if (args.delegated !== undefined && args.delegated !== null) {
        this.delegated = new ttypes.Delegated(args.delegated);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.balance = new general_ttypes.Amount();
          this.balance.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.delegated = new ttypes.Delegated();
          this.delegated.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('WalletBalanceGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.balance !== null && this.balance !== undefined) {
      output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
      this.balance.write(output);
      output.writeFieldEnd();
    }
    if (this.delegated !== null && this.delegated !== undefined) {
      output.writeFieldBegin('delegated', Thrift.Type.STRUCT, 3);
      this.delegated.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TransactionGetResult = module.exports.TransactionGetResult = class {
  constructor(args) {
    this.status = null;
    this.found = null;
    this.state = null;
    this.roundNum = null;
    this.transaction = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.found !== undefined && args.found !== null) {
        this.found = args.found;
      }
      if (args.state !== undefined && args.state !== null) {
        this.state = args.state;
      }
      if (args.roundNum !== undefined && args.roundNum !== null) {
        this.roundNum = args.roundNum;
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new ttypes.SealedTransaction(args.transaction);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.found = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.state = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.roundNum = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new ttypes.SealedTransaction();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TransactionGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.found !== null && this.found !== undefined) {
      output.writeFieldBegin('found', Thrift.Type.BOOL, 2);
      output.writeBool(this.found);
      output.writeFieldEnd();
    }
    if (this.state !== null && this.state !== undefined) {
      output.writeFieldBegin('state', Thrift.Type.I32, 3);
      output.writeI32(this.state);
      output.writeFieldEnd();
    }
    if (this.roundNum !== null && this.roundNum !== undefined) {
      output.writeFieldBegin('roundNum', Thrift.Type.I32, 4);
      output.writeI32(this.roundNum);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 5);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TransactionsGetResult = module.exports.TransactionsGetResult = class {
  constructor(args) {
    this.status = null;
    this.result = null;
    this.total_trxns_count = null;
    this.transactions = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.result !== undefined && args.result !== null) {
        this.result = args.result;
      }
      if (args.total_trxns_count !== undefined && args.total_trxns_count !== null) {
        this.total_trxns_count = args.total_trxns_count;
      }
      if (args.transactions !== undefined && args.transactions !== null) {
        this.transactions = Thrift.copyList(args.transactions, [ttypes.SealedTransaction]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.result = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.total_trxns_count = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.transactions = [];
          const _rtmp353 = input.readListBegin();
          const _size52 = _rtmp353.size || 0;
          for (let _i54 = 0; _i54 < _size52; ++_i54) {
            let elem55 = null;
            elem55 = new ttypes.SealedTransaction();
            elem55.read(input);
            this.transactions.push(elem55);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TransactionsGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.result !== null && this.result !== undefined) {
      output.writeFieldBegin('result', Thrift.Type.BOOL, 2);
      output.writeBool(this.result);
      output.writeFieldEnd();
    }
    if (this.total_trxns_count !== null && this.total_trxns_count !== undefined) {
      output.writeFieldBegin('total_trxns_count', Thrift.Type.I32, 3);
      output.writeI32(this.total_trxns_count);
      output.writeFieldEnd();
    }
    if (this.transactions !== null && this.transactions !== undefined) {
      output.writeFieldBegin('transactions', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.transactions.length);
      for (let iter56 in this.transactions) {
        if (this.transactions.hasOwnProperty(iter56)) {
          iter56 = this.transactions[iter56];
          iter56.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TransactionFlowResult = module.exports.TransactionFlowResult = class {
  constructor(args) {
    this.status = null;
    this.smart_contract_result = null;
    this.roundNum = null;
    this.id = null;
    this.fee = null;
    this.extraFee = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.smart_contract_result !== undefined && args.smart_contract_result !== null) {
        this.smart_contract_result = new general_ttypes.Variant(args.smart_contract_result);
      }
      if (args.roundNum !== undefined && args.roundNum !== null) {
        this.roundNum = args.roundNum;
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = new ttypes.TransactionId(args.id);
      }
      if (args.fee !== undefined && args.fee !== null) {
        this.fee = new general_ttypes.Amount(args.fee);
      }
      if (args.extraFee !== undefined && args.extraFee !== null) {
        this.extraFee = Thrift.copyList(args.extraFee, [ttypes.ExtraFee]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.smart_contract_result = new general_ttypes.Variant();
          this.smart_contract_result.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.roundNum = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.id = new ttypes.TransactionId();
          this.id.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.fee = new general_ttypes.Amount();
          this.fee.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.extraFee = [];
          const _rtmp358 = input.readListBegin();
          const _size57 = _rtmp358.size || 0;
          for (let _i59 = 0; _i59 < _size57; ++_i59) {
            let elem60 = null;
            elem60 = new ttypes.ExtraFee();
            elem60.read(input);
            this.extraFee.push(elem60);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TransactionFlowResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.smart_contract_result !== null && this.smart_contract_result !== undefined) {
      output.writeFieldBegin('smart_contract_result', Thrift.Type.STRUCT, 2);
      this.smart_contract_result.write(output);
      output.writeFieldEnd();
    }
    if (this.roundNum !== null && this.roundNum !== undefined) {
      output.writeFieldBegin('roundNum', Thrift.Type.I32, 3);
      output.writeI32(this.roundNum);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRUCT, 4);
      this.id.write(output);
      output.writeFieldEnd();
    }
    if (this.fee !== null && this.fee !== undefined) {
      output.writeFieldBegin('fee', Thrift.Type.STRUCT, 5);
      this.fee.write(output);
      output.writeFieldEnd();
    }
    if (this.extraFee !== null && this.extraFee !== undefined) {
      output.writeFieldBegin('extraFee', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRUCT, this.extraFee.length);
      for (let iter61 in this.extraFee) {
        if (this.extraFee.hasOwnProperty(iter61)) {
          iter61 = this.extraFee[iter61];
          iter61.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SingleTokenQuery = module.exports.SingleTokenQuery = class {
  constructor(args) {
    this.tokenAddress = null;
    this.fromId = null;
    if (args) {
      if (args.tokenAddress !== undefined && args.tokenAddress !== null) {
        this.tokenAddress = args.tokenAddress;
      }
      if (args.fromId !== undefined && args.fromId !== null) {
        this.fromId = new ttypes.TransactionId(args.fromId);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.tokenAddress = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.fromId = new ttypes.TransactionId();
          this.fromId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SingleTokenQuery');
    if (this.tokenAddress !== null && this.tokenAddress !== undefined) {
      output.writeFieldBegin('tokenAddress', Thrift.Type.STRING, 1);
      output.writeBinary(this.tokenAddress);
      output.writeFieldEnd();
    }
    if (this.fromId !== null && this.fromId !== undefined) {
      output.writeFieldBegin('fromId', Thrift.Type.STRUCT, 2);
      this.fromId.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SingleQuery = module.exports.SingleQuery = class {
  constructor(args) {
    this.requestedAddress = null;
    this.fromId = null;
    this.tokensList = null;
    if (args) {
      if (args.requestedAddress !== undefined && args.requestedAddress !== null) {
        this.requestedAddress = args.requestedAddress;
      }
      if (args.fromId !== undefined && args.fromId !== null) {
        this.fromId = new ttypes.TransactionId(args.fromId);
      }
      if (args.tokensList !== undefined && args.tokensList !== null) {
        this.tokensList = Thrift.copyList(args.tokensList, [ttypes.SingleTokenQuery]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestedAddress = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.fromId = new ttypes.TransactionId();
          this.fromId.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.tokensList = [];
          const _rtmp363 = input.readListBegin();
          const _size62 = _rtmp363.size || 0;
          for (let _i64 = 0; _i64 < _size62; ++_i64) {
            let elem65 = null;
            elem65 = new ttypes.SingleTokenQuery();
            elem65.read(input);
            this.tokensList.push(elem65);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SingleQuery');
    if (this.requestedAddress !== null && this.requestedAddress !== undefined) {
      output.writeFieldBegin('requestedAddress', Thrift.Type.STRING, 1);
      output.writeBinary(this.requestedAddress);
      output.writeFieldEnd();
    }
    if (this.fromId !== null && this.fromId !== undefined) {
      output.writeFieldBegin('fromId', Thrift.Type.STRUCT, 2);
      this.fromId.write(output);
      output.writeFieldEnd();
    }
    if (this.tokensList !== null && this.tokensList !== undefined) {
      output.writeFieldBegin('tokensList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.tokensList.length);
      for (let iter66 in this.tokensList) {
        if (this.tokensList.hasOwnProperty(iter66)) {
          iter66 = this.tokensList[iter66];
          iter66.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TransactionsQuery = module.exports.TransactionsQuery = class {
  constructor(args) {
    this.flag = null;
    this.queries = null;
    if (args) {
      if (args.flag !== undefined && args.flag !== null) {
        this.flag = args.flag;
      }
      if (args.queries !== undefined && args.queries !== null) {
        this.queries = Thrift.copyList(args.queries, [ttypes.SingleQuery]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I16) {
          this.flag = input.readI16();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.queries = [];
          const _rtmp368 = input.readListBegin();
          const _size67 = _rtmp368.size || 0;
          for (let _i69 = 0; _i69 < _size67; ++_i69) {
            let elem70 = null;
            elem70 = new ttypes.SingleQuery();
            elem70.read(input);
            this.queries.push(elem70);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TransactionsQuery');
    if (this.flag !== null && this.flag !== undefined) {
      output.writeFieldBegin('flag', Thrift.Type.I16, 1);
      output.writeI16(this.flag);
      output.writeFieldEnd();
    }
    if (this.queries !== null && this.queries !== undefined) {
      output.writeFieldBegin('queries', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.queries.length);
      for (let iter71 in this.queries) {
        if (this.queries.hasOwnProperty(iter71)) {
          iter71 = this.queries[iter71];
          iter71.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SelectedTokenTransfers = module.exports.SelectedTokenTransfers = class {
  constructor(args) {
    this.tokenAddress = null;
    this.tokenName = null;
    this.tokenTiker = null;
    this.transfers = null;
    if (args) {
      if (args.tokenAddress !== undefined && args.tokenAddress !== null) {
        this.tokenAddress = args.tokenAddress;
      }
      if (args.tokenName !== undefined && args.tokenName !== null) {
        this.tokenName = args.tokenName;
      }
      if (args.tokenTiker !== undefined && args.tokenTiker !== null) {
        this.tokenTiker = args.tokenTiker;
      }
      if (args.transfers !== undefined && args.transfers !== null) {
        this.transfers = Thrift.copyList(args.transfers, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.tokenAddress = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.tokenName = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.tokenTiker = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.transfers = [];
          const _rtmp373 = input.readListBegin();
          const _size72 = _rtmp373.size || 0;
          for (let _i74 = 0; _i74 < _size72; ++_i74) {
            let elem75 = null;
            elem75 = new ttypes.TokenTransfer();
            elem75.read(input);
            this.transfers.push(elem75);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SelectedTokenTransfers');
    if (this.tokenAddress !== null && this.tokenAddress !== undefined) {
      output.writeFieldBegin('tokenAddress', Thrift.Type.STRING, 1);
      output.writeBinary(this.tokenAddress);
      output.writeFieldEnd();
    }
    if (this.tokenName !== null && this.tokenName !== undefined) {
      output.writeFieldBegin('tokenName', Thrift.Type.STRING, 2);
      output.writeString(this.tokenName);
      output.writeFieldEnd();
    }
    if (this.tokenTiker !== null && this.tokenTiker !== undefined) {
      output.writeFieldBegin('tokenTiker', Thrift.Type.STRING, 3);
      output.writeString(this.tokenTiker);
      output.writeFieldEnd();
    }
    if (this.transfers !== null && this.transfers !== undefined) {
      output.writeFieldBegin('transfers', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.transfers.length);
      for (let iter76 in this.transfers) {
        if (this.transfers.hasOwnProperty(iter76)) {
          iter76 = this.transfers[iter76];
          iter76.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PublicKeyTransactions = module.exports.PublicKeyTransactions = class {
  constructor(args) {
    this.requestedAddress = null;
    this.transactions = null;
    this.transfersList = null;
    if (args) {
      if (args.requestedAddress !== undefined && args.requestedAddress !== null) {
        this.requestedAddress = args.requestedAddress;
      }
      if (args.transactions !== undefined && args.transactions !== null) {
        this.transactions = Thrift.copyList(args.transactions, [ttypes.ShortTransaction]);
      }
      if (args.transfersList !== undefined && args.transfersList !== null) {
        this.transfersList = Thrift.copyList(args.transfersList, [ttypes.SelectedTokenTransfers]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.requestedAddress = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.transactions = [];
          const _rtmp378 = input.readListBegin();
          const _size77 = _rtmp378.size || 0;
          for (let _i79 = 0; _i79 < _size77; ++_i79) {
            let elem80 = null;
            elem80 = new ttypes.ShortTransaction();
            elem80.read(input);
            this.transactions.push(elem80);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.transfersList = [];
          const _rtmp382 = input.readListBegin();
          const _size81 = _rtmp382.size || 0;
          for (let _i83 = 0; _i83 < _size81; ++_i83) {
            let elem84 = null;
            elem84 = new ttypes.SelectedTokenTransfers();
            elem84.read(input);
            this.transfersList.push(elem84);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PublicKeyTransactions');
    if (this.requestedAddress !== null && this.requestedAddress !== undefined) {
      output.writeFieldBegin('requestedAddress', Thrift.Type.STRING, 1);
      output.writeBinary(this.requestedAddress);
      output.writeFieldEnd();
    }
    if (this.transactions !== null && this.transactions !== undefined) {
      output.writeFieldBegin('transactions', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.transactions.length);
      for (let iter85 in this.transactions) {
        if (this.transactions.hasOwnProperty(iter85)) {
          iter85 = this.transactions[iter85];
          iter85.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.transfersList !== null && this.transfersList !== undefined) {
      output.writeFieldBegin('transfersList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.transfersList.length);
      for (let iter86 in this.transfersList) {
        if (this.transfersList.hasOwnProperty(iter86)) {
          iter86 = this.transfersList[iter86];
          iter86.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const FilteredTransactionsListResult = module.exports.FilteredTransactionsListResult = class {
  constructor(args) {
    this.status = null;
    this.queryResponse = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.queryResponse !== undefined && args.queryResponse !== null) {
        this.queryResponse = Thrift.copyList(args.queryResponse, [ttypes.PublicKeyTransactions]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.queryResponse = [];
          const _rtmp388 = input.readListBegin();
          const _size87 = _rtmp388.size || 0;
          for (let _i89 = 0; _i89 < _size87; ++_i89) {
            let elem90 = null;
            elem90 = new ttypes.PublicKeyTransactions();
            elem90.read(input);
            this.queryResponse.push(elem90);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('FilteredTransactionsListResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.queryResponse !== null && this.queryResponse !== undefined) {
      output.writeFieldBegin('queryResponse', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.queryResponse.length);
      for (let iter91 in this.queryResponse) {
        if (this.queryResponse.hasOwnProperty(iter91)) {
          iter91 = this.queryResponse[iter91];
          iter91.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PoolListGetResult = module.exports.PoolListGetResult = class {
  constructor(args) {
    this.status = null;
    this.result = null;
    this.count = null;
    this.pools = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.result !== undefined && args.result !== null) {
        this.result = args.result;
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
      if (args.pools !== undefined && args.pools !== null) {
        this.pools = Thrift.copyList(args.pools, [ttypes.Pool]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.result = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.LIST) {
          this.pools = [];
          const _rtmp393 = input.readListBegin();
          const _size92 = _rtmp393.size || 0;
          for (let _i94 = 0; _i94 < _size92; ++_i94) {
            let elem95 = null;
            elem95 = new ttypes.Pool();
            elem95.read(input);
            this.pools.push(elem95);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PoolListGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.result !== null && this.result !== undefined) {
      output.writeFieldBegin('result', Thrift.Type.BOOL, 2);
      output.writeBool(this.result);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 3);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    if (this.pools !== null && this.pools !== undefined) {
      output.writeFieldBegin('pools', Thrift.Type.LIST, 4);
      output.writeListBegin(Thrift.Type.STRUCT, this.pools.length);
      for (let iter96 in this.pools) {
        if (this.pools.hasOwnProperty(iter96)) {
          iter96 = this.pools[iter96];
          iter96.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PoolInfoGetResult = module.exports.PoolInfoGetResult = class {
  constructor(args) {
    this.status = null;
    this.isFound = null;
    this.pool = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.isFound !== undefined && args.isFound !== null) {
        this.isFound = args.isFound;
      }
      if (args.pool !== undefined && args.pool !== null) {
        this.pool = new ttypes.Pool(args.pool);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.BOOL) {
          this.isFound = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.pool = new ttypes.Pool();
          this.pool.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PoolInfoGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.isFound !== null && this.isFound !== undefined) {
      output.writeFieldBegin('isFound', Thrift.Type.BOOL, 2);
      output.writeBool(this.isFound);
      output.writeFieldEnd();
    }
    if (this.pool !== null && this.pool !== undefined) {
      output.writeFieldBegin('pool', Thrift.Type.STRUCT, 3);
      this.pool.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const PoolTransactionsGetResult = module.exports.PoolTransactionsGetResult = class {
  constructor(args) {
    this.status = null;
    this.transactions = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.transactions !== undefined && args.transactions !== null) {
        this.transactions = Thrift.copyList(args.transactions, [ttypes.SealedTransaction]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.transactions = [];
          const _rtmp398 = input.readListBegin();
          const _size97 = _rtmp398.size || 0;
          for (let _i99 = 0; _i99 < _size97; ++_i99) {
            let elem100 = null;
            elem100 = new ttypes.SealedTransaction();
            elem100.read(input);
            this.transactions.push(elem100);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('PoolTransactionsGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.transactions !== null && this.transactions !== undefined) {
      output.writeFieldBegin('transactions', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.transactions.length);
      for (let iter101 in this.transactions) {
        if (this.transactions.hasOwnProperty(iter101)) {
          iter101 = this.transactions[iter101];
          iter101.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const StatsGetResult = module.exports.StatsGetResult = class {
  constructor(args) {
    this.status = null;
    this.stats = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.stats !== undefined && args.stats !== null) {
        this.stats = Thrift.copyList(args.stats, [ttypes.PeriodStats]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.stats = [];
          const _rtmp3103 = input.readListBegin();
          const _size102 = _rtmp3103.size || 0;
          for (let _i104 = 0; _i104 < _size102; ++_i104) {
            let elem105 = null;
            elem105 = new ttypes.PeriodStats();
            elem105.read(input);
            this.stats.push(elem105);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('StatsGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.stats !== null && this.stats !== undefined) {
      output.writeFieldBegin('stats', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.stats.length);
      for (let iter106 in this.stats) {
        if (this.stats.hasOwnProperty(iter106)) {
          iter106 = this.stats[iter106];
          iter106.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartContractGetResult = module.exports.SmartContractGetResult = class {
  constructor(args) {
    this.status = null;
    this.smartContract = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.smartContract !== undefined && args.smartContract !== null) {
        this.smartContract = new ttypes.SmartContract(args.smartContract);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.smartContract = new ttypes.SmartContract();
          this.smartContract.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartContractGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.smartContract !== null && this.smartContract !== undefined) {
      output.writeFieldBegin('smartContract', Thrift.Type.STRUCT, 2);
      this.smartContract.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartContractAddressesListGetResult = module.exports.SmartContractAddressesListGetResult = class {
  constructor(args) {
    this.status = null;
    this.addressesList = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.addressesList !== undefined && args.addressesList !== null) {
        this.addressesList = Thrift.copyList(args.addressesList, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.addressesList = [];
          const _rtmp3108 = input.readListBegin();
          const _size107 = _rtmp3108.size || 0;
          for (let _i109 = 0; _i109 < _size107; ++_i109) {
            let elem110 = null;
            elem110 = input.readBinary();
            this.addressesList.push(elem110);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartContractAddressesListGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.addressesList !== null && this.addressesList !== undefined) {
      output.writeFieldBegin('addressesList', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRING, this.addressesList.length);
      for (let iter111 in this.addressesList) {
        if (this.addressesList.hasOwnProperty(iter111)) {
          iter111 = this.addressesList[iter111];
          output.writeBinary(iter111);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartContractsListGetResult = module.exports.SmartContractsListGetResult = class {
  constructor(args) {
    this.status = null;
    this.count = null;
    this.smartContractsList = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
      if (args.smartContractsList !== undefined && args.smartContractsList !== null) {
        this.smartContractsList = Thrift.copyList(args.smartContractsList, [ttypes.SmartContract]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.smartContractsList = [];
          const _rtmp3113 = input.readListBegin();
          const _size112 = _rtmp3113.size || 0;
          for (let _i114 = 0; _i114 < _size112; ++_i114) {
            let elem115 = null;
            elem115 = new ttypes.SmartContract();
            elem115.read(input);
            this.smartContractsList.push(elem115);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartContractsListGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 2);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    if (this.smartContractsList !== null && this.smartContractsList !== undefined) {
      output.writeFieldBegin('smartContractsList', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.smartContractsList.length);
      for (let iter116 in this.smartContractsList) {
        if (this.smartContractsList.hasOwnProperty(iter116)) {
          iter116 = this.smartContractsList[iter116];
          iter116.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TransactionsStateGetResult = module.exports.TransactionsStateGetResult = class {
  constructor(args) {
    this.status = null;
    this.states = null;
    this.roundNum = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.states !== undefined && args.states !== null) {
        this.states = Thrift.copyMap(args.states, [null]);
      }
      if (args.roundNum !== undefined && args.roundNum !== null) {
        this.roundNum = args.roundNum;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.MAP) {
          this.states = {};
          const _rtmp3118 = input.readMapBegin();
          const _size117 = _rtmp3118.size || 0;
          for (let _i119 = 0; _i119 < _size117; ++_i119) {
            let key120 = null;
            let val121 = null;
            key120 = input.readI64();
            val121 = input.readI32();
            this.states[key120] = val121;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.roundNum = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TransactionsStateGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.states !== null && this.states !== undefined) {
      output.writeFieldBegin('states', Thrift.Type.MAP, 2);
      output.writeMapBegin(Thrift.Type.I64, Thrift.Type.I32, Thrift.objectLength(this.states));
      for (let kiter122 in this.states) {
        if (this.states.hasOwnProperty(kiter122)) {
          let viter123 = this.states[kiter122];
          output.writeI64(kiter122);
          output.writeI32(viter123);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    if (this.roundNum !== null && this.roundNum !== undefined) {
      output.writeFieldBegin('roundNum', Thrift.Type.I32, 3);
      output.writeI32(this.roundNum);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartMethodParamsGetResult = module.exports.SmartMethodParamsGetResult = class {
  constructor(args) {
    this.status = null;
    this.method = null;
    this.params = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.method !== undefined && args.method !== null) {
        this.method = args.method;
      }
      if (args.params !== undefined && args.params !== null) {
        this.params = Thrift.copyList(args.params, [general_ttypes.Variant]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.method = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.params = [];
          const _rtmp3125 = input.readListBegin();
          const _size124 = _rtmp3125.size || 0;
          for (let _i126 = 0; _i126 < _size124; ++_i126) {
            let elem127 = null;
            elem127 = new general_ttypes.Variant();
            elem127.read(input);
            this.params.push(elem127);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartMethodParamsGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.method !== null && this.method !== undefined) {
      output.writeFieldBegin('method', Thrift.Type.STRING, 2);
      output.writeString(this.method);
      output.writeFieldEnd();
    }
    if (this.params !== null && this.params !== undefined) {
      output.writeFieldBegin('params', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
      for (let iter128 in this.params) {
        if (this.params.hasOwnProperty(iter128)) {
          iter128 = this.params[iter128];
          iter128.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ContractAllMethodsGetResult = module.exports.ContractAllMethodsGetResult = class {
  constructor(args) {
    this.code = null;
    this.message = null;
    this.methods = null;
    if (args) {
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      }
      if (args.methods !== undefined && args.methods !== null) {
        this.methods = Thrift.copyList(args.methods, [general_ttypes.MethodDescription]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.BYTE) {
          this.code = input.readByte();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.methods = [];
          const _rtmp3130 = input.readListBegin();
          const _size129 = _rtmp3130.size || 0;
          for (let _i131 = 0; _i131 < _size129; ++_i131) {
            let elem132 = null;
            elem132 = new general_ttypes.MethodDescription();
            elem132.read(input);
            this.methods.push(elem132);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ContractAllMethodsGetResult');
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.BYTE, 1);
      output.writeByte(this.code);
      output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 2);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    if (this.methods !== null && this.methods !== undefined) {
      output.writeFieldBegin('methods', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.methods.length);
      for (let iter133 in this.methods) {
        if (this.methods.hasOwnProperty(iter133)) {
          iter133 = this.methods[iter133];
          iter133.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartContractMethodArgument = module.exports.SmartContractMethodArgument = class {
  constructor(args) {
    this.type = null;
    this.name = null;
    if (args) {
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.type = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartContractMethodArgument');
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.STRING, 1);
      output.writeString(this.type);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartContractMethod = module.exports.SmartContractMethod = class {
  constructor(args) {
    this.returnType = null;
    this.name = null;
    this.arguments = null;
    if (args) {
      if (args.returnType !== undefined && args.returnType !== null) {
        this.returnType = args.returnType;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.arguments !== undefined && args.arguments !== null) {
        this.arguments = Thrift.copyList(args.arguments, [ttypes.SmartContractMethodArgument]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.returnType = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.arguments = [];
          const _rtmp3135 = input.readListBegin();
          const _size134 = _rtmp3135.size || 0;
          for (let _i136 = 0; _i136 < _size134; ++_i136) {
            let elem137 = null;
            elem137 = new ttypes.SmartContractMethodArgument();
            elem137.read(input);
            this.arguments.push(elem137);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartContractMethod');
    if (this.returnType !== null && this.returnType !== undefined) {
      output.writeFieldBegin('returnType', Thrift.Type.STRING, 1);
      output.writeString(this.returnType);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.arguments !== null && this.arguments !== undefined) {
      output.writeFieldBegin('arguments', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.arguments.length);
      for (let iter138 in this.arguments) {
        if (this.arguments.hasOwnProperty(iter138)) {
          iter138 = this.arguments[iter138];
          iter138.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartContractDataResult = module.exports.SmartContractDataResult = class {
  constructor(args) {
    this.status = null;
    this.methods = null;
    this.variables = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.methods !== undefined && args.methods !== null) {
        this.methods = Thrift.copyList(args.methods, [ttypes.SmartContractMethod]);
      }
      if (args.variables !== undefined && args.variables !== null) {
        this.variables = Thrift.copyMap(args.variables, [general_ttypes.Variant]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.methods = [];
          const _rtmp3140 = input.readListBegin();
          const _size139 = _rtmp3140.size || 0;
          for (let _i141 = 0; _i141 < _size139; ++_i141) {
            let elem142 = null;
            elem142 = new ttypes.SmartContractMethod();
            elem142.read(input);
            this.methods.push(elem142);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.MAP) {
          this.variables = {};
          const _rtmp3144 = input.readMapBegin();
          const _size143 = _rtmp3144.size || 0;
          for (let _i145 = 0; _i145 < _size143; ++_i145) {
            let key146 = null;
            let val147 = null;
            key146 = input.readString();
            val147 = new general_ttypes.Variant();
            val147.read(input);
            this.variables[key146] = val147;
          }
          input.readMapEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartContractDataResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.methods !== null && this.methods !== undefined) {
      output.writeFieldBegin('methods', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.methods.length);
      for (let iter148 in this.methods) {
        if (this.methods.hasOwnProperty(iter148)) {
          iter148 = this.methods[iter148];
          iter148.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.variables !== null && this.variables !== undefined) {
      output.writeFieldBegin('variables', Thrift.Type.MAP, 3);
      output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.variables));
      for (let kiter149 in this.variables) {
        if (this.variables.hasOwnProperty(kiter149)) {
          let viter150 = this.variables[kiter149];
          output.writeString(kiter149);
          viter150.write(output);
        }
      }
      output.writeMapEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SmartContractCompileResult = module.exports.SmartContractCompileResult = class {
  constructor(args) {
    this.status = null;
    this.byteCodeObjects = null;
    this.tokenStandard = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.byteCodeObjects !== undefined && args.byteCodeObjects !== null) {
        this.byteCodeObjects = Thrift.copyList(args.byteCodeObjects, [general_ttypes.ByteCodeObject]);
      }
      if (args.tokenStandard !== undefined && args.tokenStandard !== null) {
        this.tokenStandard = args.tokenStandard;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.byteCodeObjects = [];
          const _rtmp3152 = input.readListBegin();
          const _size151 = _rtmp3152.size || 0;
          for (let _i153 = 0; _i153 < _size151; ++_i153) {
            let elem154 = null;
            elem154 = new general_ttypes.ByteCodeObject();
            elem154.read(input);
            this.byteCodeObjects.push(elem154);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.tokenStandard = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SmartContractCompileResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.byteCodeObjects !== null && this.byteCodeObjects !== undefined) {
      output.writeFieldBegin('byteCodeObjects', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.byteCodeObjects.length);
      for (let iter155 in this.byteCodeObjects) {
        if (this.byteCodeObjects.hasOwnProperty(iter155)) {
          iter155 = this.byteCodeObjects[iter155];
          iter155.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.tokenStandard !== null && this.tokenStandard !== undefined) {
      output.writeFieldBegin('tokenStandard', Thrift.Type.I32, 3);
      output.writeI32(this.tokenStandard);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenInfo = module.exports.TokenInfo = class {
  constructor(args) {
    this.address = null;
    this.code = null;
    this.name = null;
    this.totalSupply = null;
    this.owner = null;
    this.transfersCount = null;
    this.transactionsCount = null;
    this.holdersCount = null;
    this.tokenStandard = null;
    if (args) {
      if (args.address !== undefined && args.address !== null) {
        this.address = args.address;
      }
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.totalSupply !== undefined && args.totalSupply !== null) {
        this.totalSupply = args.totalSupply;
      }
      if (args.owner !== undefined && args.owner !== null) {
        this.owner = args.owner;
      }
      if (args.transfersCount !== undefined && args.transfersCount !== null) {
        this.transfersCount = args.transfersCount;
      }
      if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
        this.transactionsCount = args.transactionsCount;
      }
      if (args.holdersCount !== undefined && args.holdersCount !== null) {
        this.holdersCount = args.holdersCount;
      }
      if (args.tokenStandard !== undefined && args.tokenStandard !== null) {
        this.tokenStandard = args.tokenStandard;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.address = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.code = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.totalSupply = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.owner = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I32) {
          this.transfersCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.transactionsCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I32) {
          this.holdersCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I32) {
          this.tokenStandard = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenInfo');
    if (this.address !== null && this.address !== undefined) {
      output.writeFieldBegin('address', Thrift.Type.STRING, 1);
      output.writeBinary(this.address);
      output.writeFieldEnd();
    }
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.STRING, 2);
      output.writeString(this.code);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 3);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.totalSupply !== null && this.totalSupply !== undefined) {
      output.writeFieldBegin('totalSupply', Thrift.Type.STRING, 4);
      output.writeString(this.totalSupply);
      output.writeFieldEnd();
    }
    if (this.owner !== null && this.owner !== undefined) {
      output.writeFieldBegin('owner', Thrift.Type.STRING, 5);
      output.writeBinary(this.owner);
      output.writeFieldEnd();
    }
    if (this.transfersCount !== null && this.transfersCount !== undefined) {
      output.writeFieldBegin('transfersCount', Thrift.Type.I32, 6);
      output.writeI32(this.transfersCount);
      output.writeFieldEnd();
    }
    if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
      output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 7);
      output.writeI32(this.transactionsCount);
      output.writeFieldEnd();
    }
    if (this.holdersCount !== null && this.holdersCount !== undefined) {
      output.writeFieldBegin('holdersCount', Thrift.Type.I32, 8);
      output.writeI32(this.holdersCount);
      output.writeFieldEnd();
    }
    if (this.tokenStandard !== null && this.tokenStandard !== undefined) {
      output.writeFieldBegin('tokenStandard', Thrift.Type.I32, 9);
      output.writeI32(this.tokenStandard);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenTransaction = module.exports.TokenTransaction = class {
  constructor(args) {
    this.token = null;
    this.transaction = null;
    this.time = null;
    this.initiator = null;
    this.method = null;
    this.params = null;
    this.state = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new ttypes.TransactionId(args.transaction);
      }
      if (args.time !== undefined && args.time !== null) {
        this.time = args.time;
      }
      if (args.initiator !== undefined && args.initiator !== null) {
        this.initiator = args.initiator;
      }
      if (args.method !== undefined && args.method !== null) {
        this.method = args.method;
      }
      if (args.params !== undefined && args.params !== null) {
        this.params = Thrift.copyList(args.params, [general_ttypes.Variant]);
      }
      if (args.state !== undefined && args.state !== null) {
        this.state = args.state;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new ttypes.TransactionId();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.time = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.initiator = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.method = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.LIST) {
          this.params = [];
          const _rtmp3157 = input.readListBegin();
          const _size156 = _rtmp3157.size || 0;
          for (let _i158 = 0; _i158 < _size156; ++_i158) {
            let elem159 = null;
            elem159 = new general_ttypes.Variant();
            elem159.read(input);
            this.params.push(elem159);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I32) {
          this.state = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenTransaction');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeBinary(this.token);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 2);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.time !== null && this.time !== undefined) {
      output.writeFieldBegin('time', Thrift.Type.I64, 3);
      output.writeI64(this.time);
      output.writeFieldEnd();
    }
    if (this.initiator !== null && this.initiator !== undefined) {
      output.writeFieldBegin('initiator', Thrift.Type.STRING, 4);
      output.writeBinary(this.initiator);
      output.writeFieldEnd();
    }
    if (this.method !== null && this.method !== undefined) {
      output.writeFieldBegin('method', Thrift.Type.STRING, 5);
      output.writeString(this.method);
      output.writeFieldEnd();
    }
    if (this.params !== null && this.params !== undefined) {
      output.writeFieldBegin('params', Thrift.Type.LIST, 6);
      output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
      for (let iter160 in this.params) {
        if (this.params.hasOwnProperty(iter160)) {
          iter160 = this.params[iter160];
          iter160.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.state !== null && this.state !== undefined) {
      output.writeFieldBegin('state', Thrift.Type.I32, 7);
      output.writeI32(this.state);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenHolder = module.exports.TokenHolder = class {
  constructor(args) {
    this.holder = null;
    this.token = null;
    this.balance = null;
    this.transfersCount = null;
    if (args) {
      if (args.holder !== undefined && args.holder !== null) {
        this.holder = args.holder;
      }
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.balance !== undefined && args.balance !== null) {
        this.balance = args.balance;
      }
      if (args.transfersCount !== undefined && args.transfersCount !== null) {
        this.transfersCount = args.transfersCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.holder = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.balance = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I32) {
          this.transfersCount = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenHolder');
    if (this.holder !== null && this.holder !== undefined) {
      output.writeFieldBegin('holder', Thrift.Type.STRING, 1);
      output.writeBinary(this.holder);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 2);
      output.writeBinary(this.token);
      output.writeFieldEnd();
    }
    if (this.balance !== null && this.balance !== undefined) {
      output.writeFieldBegin('balance', Thrift.Type.STRING, 3);
      output.writeString(this.balance);
      output.writeFieldEnd();
    }
    if (this.transfersCount !== null && this.transfersCount !== undefined) {
      output.writeFieldBegin('transfersCount', Thrift.Type.I32, 4);
      output.writeI32(this.transfersCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenBalance = module.exports.TokenBalance = class {
  constructor(args) {
    this.token = null;
    this.code = null;
    this.name = null;
    this.balance = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.balance !== undefined && args.balance !== null) {
        this.balance = args.balance;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.code = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.balance = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenBalance');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeBinary(this.token);
      output.writeFieldEnd();
    }
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.STRING, 2);
      output.writeString(this.code);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 3);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.balance !== null && this.balance !== undefined) {
      output.writeFieldBegin('balance', Thrift.Type.STRING, 4);
      output.writeString(this.balance);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenBalancesResult = module.exports.TokenBalancesResult = class {
  constructor(args) {
    this.status = null;
    this.balances = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.balances !== undefined && args.balances !== null) {
        this.balances = Thrift.copyList(args.balances, [ttypes.TokenBalance]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.balances = [];
          const _rtmp3162 = input.readListBegin();
          const _size161 = _rtmp3162.size || 0;
          for (let _i163 = 0; _i163 < _size161; ++_i163) {
            let elem164 = null;
            elem164 = new ttypes.TokenBalance();
            elem164.read(input);
            this.balances.push(elem164);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenBalancesResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.balances !== null && this.balances !== undefined) {
      output.writeFieldBegin('balances', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.STRUCT, this.balances.length);
      for (let iter165 in this.balances) {
        if (this.balances.hasOwnProperty(iter165)) {
          iter165 = this.balances[iter165];
          iter165.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenTransfer = module.exports.TokenTransfer = class {
  constructor(args) {
    this.token = null;
    this.code = null;
    this.sender = null;
    this.receiver = null;
    this.amount = null;
    this.initiator = null;
    this.transaction = null;
    this.time = null;
    this.state = null;
    this.userFields = null;
    this.fee = null;
    this.extraFee = null;
    if (args) {
      if (args.token !== undefined && args.token !== null) {
        this.token = args.token;
      }
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.sender !== undefined && args.sender !== null) {
        this.sender = args.sender;
      }
      if (args.receiver !== undefined && args.receiver !== null) {
        this.receiver = args.receiver;
      }
      if (args.amount !== undefined && args.amount !== null) {
        this.amount = args.amount;
      }
      if (args.initiator !== undefined && args.initiator !== null) {
        this.initiator = args.initiator;
      }
      if (args.transaction !== undefined && args.transaction !== null) {
        this.transaction = new ttypes.TransactionId(args.transaction);
      }
      if (args.time !== undefined && args.time !== null) {
        this.time = args.time;
      }
      if (args.state !== undefined && args.state !== null) {
        this.state = args.state;
      }
      if (args.userFields !== undefined && args.userFields !== null) {
        this.userFields = args.userFields;
      }
      if (args.fee !== undefined && args.fee !== null) {
        this.fee = new ttypes.AmountCommission(args.fee);
      }
      if (args.extraFee !== undefined && args.extraFee !== null) {
        this.extraFee = Thrift.copyList(args.extraFee, [ttypes.ExtraFee]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.code = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.sender = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.receiver = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.amount = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.initiator = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRUCT) {
          this.transaction = new ttypes.TransactionId();
          this.transaction.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I64) {
          this.time = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I32) {
          this.state = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.userFields = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRUCT) {
          this.fee = new ttypes.AmountCommission();
          this.fee.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.LIST) {
          this.extraFee = [];
          const _rtmp3167 = input.readListBegin();
          const _size166 = _rtmp3167.size || 0;
          for (let _i168 = 0; _i168 < _size166; ++_i168) {
            let elem169 = null;
            elem169 = new ttypes.ExtraFee();
            elem169.read(input);
            this.extraFee.push(elem169);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenTransfer');
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRING, 1);
      output.writeBinary(this.token);
      output.writeFieldEnd();
    }
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.STRING, 2);
      output.writeString(this.code);
      output.writeFieldEnd();
    }
    if (this.sender !== null && this.sender !== undefined) {
      output.writeFieldBegin('sender', Thrift.Type.STRING, 3);
      output.writeBinary(this.sender);
      output.writeFieldEnd();
    }
    if (this.receiver !== null && this.receiver !== undefined) {
      output.writeFieldBegin('receiver', Thrift.Type.STRING, 4);
      output.writeBinary(this.receiver);
      output.writeFieldEnd();
    }
    if (this.amount !== null && this.amount !== undefined) {
      output.writeFieldBegin('amount', Thrift.Type.STRING, 5);
      output.writeString(this.amount);
      output.writeFieldEnd();
    }
    if (this.initiator !== null && this.initiator !== undefined) {
      output.writeFieldBegin('initiator', Thrift.Type.STRING, 6);
      output.writeBinary(this.initiator);
      output.writeFieldEnd();
    }
    if (this.transaction !== null && this.transaction !== undefined) {
      output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 7);
      this.transaction.write(output);
      output.writeFieldEnd();
    }
    if (this.time !== null && this.time !== undefined) {
      output.writeFieldBegin('time', Thrift.Type.I64, 8);
      output.writeI64(this.time);
      output.writeFieldEnd();
    }
    if (this.state !== null && this.state !== undefined) {
      output.writeFieldBegin('state', Thrift.Type.I32, 9);
      output.writeI32(this.state);
      output.writeFieldEnd();
    }
    if (this.userFields !== null && this.userFields !== undefined) {
      output.writeFieldBegin('userFields', Thrift.Type.STRING, 10);
      output.writeBinary(this.userFields);
      output.writeFieldEnd();
    }
    if (this.fee !== null && this.fee !== undefined) {
      output.writeFieldBegin('fee', Thrift.Type.STRUCT, 11);
      this.fee.write(output);
      output.writeFieldEnd();
    }
    if (this.extraFee !== null && this.extraFee !== undefined) {
      output.writeFieldBegin('extraFee', Thrift.Type.LIST, 14);
      output.writeListBegin(Thrift.Type.STRUCT, this.extraFee.length);
      for (let iter170 in this.extraFee) {
        if (this.extraFee.hasOwnProperty(iter170)) {
          iter170 = this.extraFee[iter170];
          iter170.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenTransfersResult = module.exports.TokenTransfersResult = class {
  constructor(args) {
    this.status = null;
    this.count = null;
    this.transfers = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
      if (args.transfers !== undefined && args.transfers !== null) {
        this.transfers = Thrift.copyList(args.transfers, [ttypes.TokenTransfer]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.transfers = [];
          const _rtmp3172 = input.readListBegin();
          const _size171 = _rtmp3172.size || 0;
          for (let _i173 = 0; _i173 < _size171; ++_i173) {
            let elem174 = null;
            elem174 = new ttypes.TokenTransfer();
            elem174.read(input);
            this.transfers.push(elem174);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenTransfersResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 2);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    if (this.transfers !== null && this.transfers !== undefined) {
      output.writeFieldBegin('transfers', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.transfers.length);
      for (let iter175 in this.transfers) {
        if (this.transfers.hasOwnProperty(iter175)) {
          iter175 = this.transfers[iter175];
          iter175.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenTransactionsResult = module.exports.TokenTransactionsResult = class {
  constructor(args) {
    this.status = null;
    this.count = null;
    this.transactions = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
      if (args.transactions !== undefined && args.transactions !== null) {
        this.transactions = Thrift.copyList(args.transactions, [ttypes.TokenTransaction]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.transactions = [];
          const _rtmp3177 = input.readListBegin();
          const _size176 = _rtmp3177.size || 0;
          for (let _i178 = 0; _i178 < _size176; ++_i178) {
            let elem179 = null;
            elem179 = new ttypes.TokenTransaction();
            elem179.read(input);
            this.transactions.push(elem179);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenTransactionsResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 2);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    if (this.transactions !== null && this.transactions !== undefined) {
      output.writeFieldBegin('transactions', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.transactions.length);
      for (let iter180 in this.transactions) {
        if (this.transactions.hasOwnProperty(iter180)) {
          iter180 = this.transactions[iter180];
          iter180.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenInfoResult = module.exports.TokenInfoResult = class {
  constructor(args) {
    this.status = null;
    this.token = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.token !== undefined && args.token !== null) {
        this.token = new ttypes.TokenInfo(args.token);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.token = new ttypes.TokenInfo();
          this.token.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenInfoResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.token !== null && this.token !== undefined) {
      output.writeFieldBegin('token', Thrift.Type.STRUCT, 2);
      this.token.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenHoldersResult = module.exports.TokenHoldersResult = class {
  constructor(args) {
    this.status = null;
    this.count = null;
    this.holders = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
      if (args.holders !== undefined && args.holders !== null) {
        this.holders = Thrift.copyList(args.holders, [ttypes.TokenHolder]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.holders = [];
          const _rtmp3182 = input.readListBegin();
          const _size181 = _rtmp3182.size || 0;
          for (let _i183 = 0; _i183 < _size181; ++_i183) {
            let elem184 = null;
            elem184 = new ttypes.TokenHolder();
            elem184.read(input);
            this.holders.push(elem184);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenHoldersResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 2);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    if (this.holders !== null && this.holders !== undefined) {
      output.writeFieldBegin('holders', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.holders.length);
      for (let iter185 in this.holders) {
        if (this.holders.hasOwnProperty(iter185)) {
          iter185 = this.holders[iter185];
          iter185.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokensListResult = module.exports.TokensListResult = class {
  constructor(args) {
    this.status = null;
    this.count = null;
    this.tokens = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
      if (args.tokens !== undefined && args.tokens !== null) {
        this.tokens = Thrift.copyList(args.tokens, [ttypes.TokenInfo]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.tokens = [];
          const _rtmp3187 = input.readListBegin();
          const _size186 = _rtmp3187.size || 0;
          for (let _i188 = 0; _i188 < _size186; ++_i188) {
            let elem189 = null;
            elem189 = new ttypes.TokenInfo();
            elem189.read(input);
            this.tokens.push(elem189);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokensListResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 2);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    if (this.tokens !== null && this.tokens !== undefined) {
      output.writeFieldBegin('tokens', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.tokens.length);
      for (let iter190 in this.tokens) {
        if (this.tokens.hasOwnProperty(iter190)) {
          iter190 = this.tokens[iter190];
          iter190.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const WalletInfo = module.exports.WalletInfo = class {
  constructor(args) {
    this.address = null;
    this.balance = null;
    this.transactionsNumber = null;
    this.firstTransactionTime = null;
    this.delegated = null;
    if (args) {
      if (args.address !== undefined && args.address !== null) {
        this.address = args.address;
      }
      if (args.balance !== undefined && args.balance !== null) {
        this.balance = new general_ttypes.Amount(args.balance);
      }
      if (args.transactionsNumber !== undefined && args.transactionsNumber !== null) {
        this.transactionsNumber = args.transactionsNumber;
      }
      if (args.firstTransactionTime !== undefined && args.firstTransactionTime !== null) {
        this.firstTransactionTime = args.firstTransactionTime;
      }
      if (args.delegated !== undefined && args.delegated !== null) {
        this.delegated = new ttypes.Delegated(args.delegated);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.address = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.balance = new general_ttypes.Amount();
          this.balance.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.transactionsNumber = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.firstTransactionTime = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.delegated = new ttypes.Delegated();
          this.delegated.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('WalletInfo');
    if (this.address !== null && this.address !== undefined) {
      output.writeFieldBegin('address', Thrift.Type.STRING, 1);
      output.writeBinary(this.address);
      output.writeFieldEnd();
    }
    if (this.balance !== null && this.balance !== undefined) {
      output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
      this.balance.write(output);
      output.writeFieldEnd();
    }
    if (this.transactionsNumber !== null && this.transactionsNumber !== undefined) {
      output.writeFieldBegin('transactionsNumber', Thrift.Type.I64, 3);
      output.writeI64(this.transactionsNumber);
      output.writeFieldEnd();
    }
    if (this.firstTransactionTime !== null && this.firstTransactionTime !== undefined) {
      output.writeFieldBegin('firstTransactionTime', Thrift.Type.I64, 4);
      output.writeI64(this.firstTransactionTime);
      output.writeFieldEnd();
    }
    if (this.delegated !== null && this.delegated !== undefined) {
      output.writeFieldBegin('delegated', Thrift.Type.STRUCT, 5);
      this.delegated.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ActualFeeGetResult = module.exports.ActualFeeGetResult = class {
  constructor(args) {
    this.fee = null;
    if (args) {
      if (args.fee !== undefined && args.fee !== null) {
        this.fee = new ttypes.AmountCommission(args.fee);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.fee = new ttypes.AmountCommission();
          this.fee.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ActualFeeGetResult');
    if (this.fee !== null && this.fee !== undefined) {
      output.writeFieldBegin('fee', Thrift.Type.STRUCT, 1);
      this.fee.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const WalletsGetResult = module.exports.WalletsGetResult = class {
  constructor(args) {
    this.status = null;
    this.count = null;
    this.wallets = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
      if (args.wallets !== undefined && args.wallets !== null) {
        this.wallets = Thrift.copyList(args.wallets, [ttypes.WalletInfo]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.count = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.wallets = [];
          const _rtmp3192 = input.readListBegin();
          const _size191 = _rtmp3192.size || 0;
          for (let _i193 = 0; _i193 < _size191; ++_i193) {
            let elem194 = null;
            elem194 = new ttypes.WalletInfo();
            elem194.read(input);
            this.wallets.push(elem194);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('WalletsGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.I32, 2);
      output.writeI32(this.count);
      output.writeFieldEnd();
    }
    if (this.wallets !== null && this.wallets !== undefined) {
      output.writeFieldBegin('wallets', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.wallets.length);
      for (let iter195 in this.wallets) {
        if (this.wallets.hasOwnProperty(iter195)) {
          iter195 = this.wallets[iter195];
          iter195.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TrustedInfo = module.exports.TrustedInfo = class {
  constructor(args) {
    this.address = null;
    this.timesWriter = null;
    this.timesTrusted = null;
    this.feeCollected = null;
    if (args) {
      if (args.address !== undefined && args.address !== null) {
        this.address = args.address;
      }
      if (args.timesWriter !== undefined && args.timesWriter !== null) {
        this.timesWriter = args.timesWriter;
      }
      if (args.timesTrusted !== undefined && args.timesTrusted !== null) {
        this.timesTrusted = args.timesTrusted;
      }
      if (args.feeCollected !== undefined && args.feeCollected !== null) {
        this.feeCollected = new general_ttypes.Amount(args.feeCollected);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.address = input.readBinary();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.timesWriter = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.timesTrusted = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.feeCollected = new general_ttypes.Amount();
          this.feeCollected.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TrustedInfo');
    if (this.address !== null && this.address !== undefined) {
      output.writeFieldBegin('address', Thrift.Type.STRING, 1);
      output.writeBinary(this.address);
      output.writeFieldEnd();
    }
    if (this.timesWriter !== null && this.timesWriter !== undefined) {
      output.writeFieldBegin('timesWriter', Thrift.Type.I32, 2);
      output.writeI32(this.timesWriter);
      output.writeFieldEnd();
    }
    if (this.timesTrusted !== null && this.timesTrusted !== undefined) {
      output.writeFieldBegin('timesTrusted', Thrift.Type.I32, 3);
      output.writeI32(this.timesTrusted);
      output.writeFieldEnd();
    }
    if (this.feeCollected !== null && this.feeCollected !== undefined) {
      output.writeFieldBegin('feeCollected', Thrift.Type.STRUCT, 4);
      this.feeCollected.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TrustedGetResult = module.exports.TrustedGetResult = class {
  constructor(args) {
    this.status = null;
    this.pages = null;
    this.writers = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.pages !== undefined && args.pages !== null) {
        this.pages = args.pages;
      }
      if (args.writers !== undefined && args.writers !== null) {
        this.writers = Thrift.copyList(args.writers, [ttypes.TrustedInfo]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I32) {
          this.pages = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.writers = [];
          const _rtmp3197 = input.readListBegin();
          const _size196 = _rtmp3197.size || 0;
          for (let _i198 = 0; _i198 < _size196; ++_i198) {
            let elem199 = null;
            elem199 = new ttypes.TrustedInfo();
            elem199.read(input);
            this.writers.push(elem199);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TrustedGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.pages !== null && this.pages !== undefined) {
      output.writeFieldBegin('pages', Thrift.Type.I32, 2);
      output.writeI32(this.pages);
      output.writeFieldEnd();
    }
    if (this.writers !== null && this.writers !== undefined) {
      output.writeFieldBegin('writers', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.writers.length);
      for (let iter200 in this.writers) {
        if (this.writers.hasOwnProperty(iter200)) {
          iter200 = this.writers[iter200];
          iter200.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const SyncStateResult = module.exports.SyncStateResult = class {
  constructor(args) {
    this.status = null;
    this.currRound = null;
    this.lastBlock = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.currRound !== undefined && args.currRound !== null) {
        this.currRound = args.currRound;
      }
      if (args.lastBlock !== undefined && args.lastBlock !== null) {
        this.lastBlock = args.lastBlock;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.currRound = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.lastBlock = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('SyncStateResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.currRound !== null && this.currRound !== undefined) {
      output.writeFieldBegin('currRound', Thrift.Type.I64, 2);
      output.writeI64(this.currRound);
      output.writeFieldEnd();
    }
    if (this.lastBlock !== null && this.lastBlock !== undefined) {
      output.writeFieldBegin('lastBlock', Thrift.Type.I64, 3);
      output.writeI64(this.lastBlock);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ExecuteCountGetResult = module.exports.ExecuteCountGetResult = class {
  constructor(args) {
    this.status = null;
    this.executeCount = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new general_ttypes.APIResponse(args.status);
      }
      if (args.executeCount !== undefined && args.executeCount !== null) {
        this.executeCount = args.executeCount;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new general_ttypes.APIResponse();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.executeCount = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ExecuteCountGetResult');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.executeCount !== null && this.executeCount !== undefined) {
      output.writeFieldBegin('executeCount', Thrift.Type.I64, 2);
      output.writeI64(this.executeCount);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const TokenFilters = module.exports.TokenFilters = class {
  constructor(args) {
    this.name = null;
    this.code = null;
    this.tokenStandard = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.tokenStandard !== undefined && args.tokenStandard !== null) {
        this.tokenStandard = args.tokenStandard;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.code = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I32) {
          this.tokenStandard = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('TokenFilters');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.STRING, 2);
      output.writeString(this.code);
      output.writeFieldEnd();
    }
    if (this.tokenStandard !== null && this.tokenStandard !== undefined) {
      output.writeFieldBegin('tokenStandard', Thrift.Type.I32, 3);
      output.writeI32(this.tokenStandard);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
