//
// Autogenerated by Thrift Compiler (0.15.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');


declare class ClassObject {
    public byteCodeObjects: ByteCodeObject[];
    public instance: string;

      constructor(args?: { byteCodeObjects: ByteCodeObject[]; instance: string; });
  }

declare class object {
    public nameClass: string;
    public instance: string;

      constructor(args?: { nameClass: string; instance: string; });
  }

declare class Amount {
    public integral?: number;
    public fraction?: Int64;

      constructor(args?: { integral?: number; fraction?: Int64; });
  }

declare class Variant {
    public v_null?: string;
    public v_void?: any;
    public v_boolean?: boolean;
    public v_boolean_box?: boolean;
    public v_byte?: any;
    public v_byte_box?: any;
    public v_short?: number;
    public v_short_box?: number;
    public v_int?: number;
    public v_int_box?: number;
    public v_long?: Int64;
    public v_long_box?: Int64;
    public v_float?: number;
    public v_float_box?: number;
    public v_double?: number;
    public v_double_box?: number;
    public v_string?: string;
    public v_object?: object;
    public v_array?: Variant[];
    public v_list?: Variant[];
    public v_set?: Variant[];
    public v_map?: any;
    public v_big_decimal?: string;
    public v_amount?: Amount;
    public v_byte_array?: string;

      constructor(args?: { v_null?: string; v_void?: any; v_boolean?: boolean; v_boolean_box?: boolean; v_byte?: any; v_byte_box?: any; v_short?: number; v_short_box?: number; v_int?: number; v_int_box?: number; v_long?: Int64; v_long_box?: Int64; v_float?: number; v_float_box?: number; v_double?: number; v_double_box?: number; v_string?: string; v_object?: object; v_array?: Variant[]; v_list?: Variant[]; v_set?: Variant[]; v_map?: any; v_big_decimal?: string; v_amount?: Amount; v_byte_array?: string; });
  }

declare class Annotation {
    public name: string;
    public arguments: { [k: string]: string; };

      constructor(args?: { name: string; arguments: { [k: string]: string; }; });
  }

declare class MethodArgument {
    public type: string;
    public name: string;
    public annotations: Annotation[];

      constructor(args?: { type: string; name: string; annotations: Annotation[]; });
  }

declare class MethodDescription {
    public returnType: string;
    public name: string;
    public arguments: MethodArgument[];
    public annotations: Annotation[];

      constructor(args?: { returnType: string; name: string; arguments: MethodArgument[]; annotations: Annotation[]; });
  }

declare class ByteCodeObject {
    public name: string;
    public byteCode: string;

      constructor(args?: { name: string; byteCode: string; });
  }

declare class APIResponse {
    public code: any;
    public message: string;

      constructor(args?: { code: any; message: string; });
  }
